---
title: "men_team_all_around_simulation_algo"
subtitle: "no subtitle"
author: "men_team_all_around_simulation_algo"
format: 
  html:
    self-contained: true
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
## Setup - run this first to get the libraries
```{r setup, include=FALSE}
library(tidyverse)
library(data.table)
library(ggplot2)
library(purrr)
library(dplyr)
library(KernSmooth)

## LOG INTO https://hypatia.stat.duke.edu USING NET ID AND PW AND THEN CLONE OUR REPO THERE AND THEN RUN THESE SIMULATION .QMD FILES

flexiblas::flexiblas_load_backend("OPENBLAS-THREADS") |>
  flexiblas::flexiblas_switch()
  flexiblas::flexiblas_set_num_threads(8)
```



## THE SET-UP BEFORE THE ALGO -- make sure to replace read.csv with the correct file path -- RUN THIS CODE CHUNK BEFORE RUNNING ANY OF THE HELPER FUNCTION INITIATING CODE CHUNKS BELOW
```{r}
## Re-arranged data
data_men_scores_2022_to_2023 <- read.csv("cleaned data/active_restricted_men_2023.csv") %>%  
  select(Country, FullName, Apparatus, Score, type) %>% 
  # first, making c(VT, VT1, VT2) all just VT, since they're all the same apparatus, just named different at different competitions
  mutate(Apparatus = ifelse(Apparatus %in% c("VT1", "VT2"), "VT", Apparatus))  %>%
  filter(!is.na(Score) & Score != 0) #dropping all NAs -- ask the team: should we also drop zeros? -> emily said yeah 11.13.2023 7 21pm


# this is the data that will feed into the algo
data_ready_for_algo <- data_men_scores_2022_to_2023 %>%
  group_by(Country, FullName, Apparatus, type) %>%
  summarise(Scores = list(Score), .groups = 'drop')




## Global Fixed Integers
minHBScoreIn_data_men_scores_2022_to_2023 <- min(data_men_scores_2022_to_2023$Score[data_men_scores_2022_to_2023$Apparatus == "HB"], na.rm = TRUE)
maxHBScoreIn_data_men_scores_2022_to_2023 <- max(data_men_scores_2022_to_2023$Score[data_men_scores_2022_to_2023$Apparatus == "HB"], na.rm = TRUE)

minFXScoreIn_data_men_scores_2022_to_2023 <- min(data_men_scores_2022_to_2023$Score[data_men_scores_2022_to_2023$Apparatus == "FX"], na.rm = TRUE)
maxFXScoreIn_data_men_scores_2022_to_2023 <- max(data_men_scores_2022_to_2023$Score[data_men_scores_2022_to_2023$Apparatus == "FX"], na.rm = TRUE)

minPBScoreIn_data_men_scores_2022_to_2023 <- min(data_men_scores_2022_to_2023$Score[data_men_scores_2022_to_2023$Apparatus == "PB"], na.rm = TRUE)
maxPBScoreIn_data_men_scores_2022_to_2023 <- max(data_men_scores_2022_to_2023$Score[data_men_scores_2022_to_2023$Apparatus == "PB"], na.rm = TRUE)

minPHScoreIn_data_men_scores_2022_to_2023 <- min(data_men_scores_2022_to_2023$Score[data_men_scores_2022_to_2023$Apparatus == "PH"], na.rm = TRUE)
maxPHScoreIn_data_men_scores_2022_to_2023 <- max(data_men_scores_2022_to_2023$Score[data_men_scores_2022_to_2023$Apparatus == "PH"], na.rm = TRUE)

minSRScoreIn_data_men_scores_2022_to_2023 <- min(data_men_scores_2022_to_2023$Score[data_men_scores_2022_to_2023$Apparatus == "SR"], na.rm = TRUE)
maxSRScoreIn_data_men_scores_2022_to_2023 <- max(data_men_scores_2022_to_2023$Score[data_men_scores_2022_to_2023$Apparatus == "SR"], na.rm = TRUE)

minVTScoreIn_data_men_scores_2022_to_2023 <- min(data_men_scores_2022_to_2023$Score[data_men_scores_2022_to_2023$Apparatus == "VT"], na.rm = TRUE)
maxVTScoreIn_data_men_scores_2022_to_2023 <- max(data_men_scores_2022_to_2023$Score[data_men_scores_2022_to_2023$Apparatus == "VT"], na.rm = TRUE)

## 2D Table of Global Fixed Integers
minAndMaxScores2DTable <- list(
    HB = list(
        min = minHBScoreIn_data_men_scores_2022_to_2023,
        max = maxHBScoreIn_data_men_scores_2022_to_2023
    ),
    FX = list(
        min = minFXScoreIn_data_men_scores_2022_to_2023,
        max = maxFXScoreIn_data_men_scores_2022_to_2023
    ),
    PB = list(
        min = minPBScoreIn_data_men_scores_2022_to_2023,
        max = maxPBScoreIn_data_men_scores_2022_to_2023
    ),
    PH = list(
        min = minPHScoreIn_data_men_scores_2022_to_2023,
        max = maxPHScoreIn_data_men_scores_2022_to_2023
    ),
    SR = list(
        min = minSRScoreIn_data_men_scores_2022_to_2023,
        max = maxSRScoreIn_data_men_scores_2022_to_2023
    ),
    VT = list(
        min = minVTScoreIn_data_men_scores_2022_to_2023,
        max = maxVTScoreIn_data_men_scores_2022_to_2023
    )
)


## TO BE FED INTO runOlympicsNTimes
allMenHBParticipants <- data_ready_for_algo %>%
  select(Country, FullName, Apparatus, type) %>%
  unique() %>% 
  filter(Apparatus == "HB")

allMenFXParticipants <- data_ready_for_algo %>%
  select(Country, FullName, Apparatus, type) %>%
  unique() %>% 
  filter(Apparatus == "FX")

allMenPBParticipants <- data_ready_for_algo %>%
  select(Country, FullName, Apparatus, type) %>%
  unique() %>% 
  filter(Apparatus == "PB")

allMenPHParticipants <- data_ready_for_algo %>%
  select(Country, FullName, Apparatus, type) %>%
  unique() %>% 
  filter(Apparatus == "PH")


allMenSRParticipants <- data_ready_for_algo %>%
  select(Country, FullName, Apparatus, type) %>%
  unique() %>% 
  filter(Apparatus == "SR")

allMenVTParticipants <- data_ready_for_algo %>%
  select(Country, FullName, Apparatus, type) %>%
  unique() %>% 
  filter(Apparatus == "VT")

allMenHBParticipants <- allMenHBParticipants %>%
  mutate(SimulationResults = lapply(seq_along(FullName), function(x) list()))

allMenFXParticipants <- allMenFXParticipants %>%
  mutate(SimulationResults = lapply(seq_along(FullName), function(x) list()))

allMenPBParticipants <- allMenPBParticipants %>%
  mutate(SimulationResults = lapply(seq_along(FullName), function(x) list()))

allMenPHParticipants <- allMenPHParticipants %>%
  mutate(SimulationResults = lapply(seq_along(FullName), function(x) list()))

allMenSRParticipants <- allMenSRParticipants %>%
  mutate(SimulationResults = lapply(seq_along(FullName), function(x) list()))

allMenVTParticipants <- allMenVTParticipants %>%
  mutate(SimulationResults = lapply(seq_along(FullName), function(x) list()))



## SD of HB Scores of all atheletes in the data (that will be the "nugget" when the there are three or fewer scores in an athlete x apparatus combination; the nugget will be used in estimateKernelDensity)
allHBScoresInTheData <- data_men_scores_2022_to_2023[data_men_scores_2022_to_2023$Apparatus == "HB", "Score"]
nuggetHB <- sd(allHBScoresInTheData)


## SD of FX Scores of all atheletes in the data (that will be the "nugget" when the there are three or fewer scores in an athlete x apparatus combination; the nugget will be used in estimateKernelDensity)
allFXScoresInTheData <- data_men_scores_2022_to_2023[data_men_scores_2022_to_2023$Apparatus == "FX", "Score"]
nuggetFX <- sd(allFXScoresInTheData)


## SD of PB Scores of all atheletes in the data (that will be the "nugget" when the there are three or fewer scores in an athlete x apparatus combination; the nugget will be used in estimateKernelDensity)
allPBScoresInTheData <- data_men_scores_2022_to_2023[data_men_scores_2022_to_2023$Apparatus == "PB", "Score"]
nuggetPB <- sd(allPBScoresInTheData)


## SD of PH Scores of all atheletes in the data (that will be the "nugget" when the there are three or fewer scores in an athlete x apparatus combination; the nugget will be used in estimateKernelDensity)
allPHScoresInTheData <- data_men_scores_2022_to_2023[data_men_scores_2022_to_2023$Apparatus == "PH", "Score"]
nuggetPH <- sd(allPHScoresInTheData)

## SD of SR Scores of all atheletes in the data (that will be the "nugget" when the there are three or fewer scores in an athlete x apparatus combination; the nugget will be used in estimateKernelDensity)
allSRScoresInTheData <- data_men_scores_2022_to_2023[data_men_scores_2022_to_2023$Apparatus == "SR", "Score"]
nuggetSR <- sd(allSRScoresInTheData)


## SD of VT Scores of all atheletes in the data (that will be the "nugget" when the there are three or fewer scores in an athlete x apparatus combination; the nugget will be used in estimateKernelDensity)
allVTScoresInTheData <- data_men_scores_2022_to_2023[data_men_scores_2022_to_2023$Apparatus == "VT", "Score"]
nuggetVT <- sd(allVTScoresInTheData)
```


## HELPER FUNCTION: createProperDataframe
```{r}
# Helper Function: createProperDataframe
# inputs are: "country code", "Athlete Name", "Apparatus (the two letters, like FX")
# output is a dataframe that is suitable for going in as input into the next step, aka creating estimated kernel densities

createProperDataframe = function(countryCode, athleteName, apparatusInitials){
  dataframeToReturn <- data_ready_for_algo %>% 
    filter(Country == countryCode, FullName == athleteName, Apparatus == apparatusInitials) %>% 
    select(Scores) %>% 
    unnest(Scores) %>% 
    unlist()
  
  apparatus <- apparatusInitials
  
  return(list(dataframeToReturn, apparatus))
}
```



## HELPER FUNCTION: estimateKernelDensity
```{r}
# Helper Function: estimateKernelDensity

# coming up with an estimate kernel density based on the inputs that are:
# 1. output of createProperDataframe = list(properDataframeCreatedForAthleteAndApparatusCombination, apparatus)
# 2. bandwidthValue (the bigger, the "smoother")

# output:
# dataframe of x and y coordinates --> coordinates of the estimated density function

estimateKernelDensity <- function(outputOfCreateProperDataframe, bandwidthValue){
  
  apparatusOfInterestHere = outputOfCreateProperDataframe[[2]]
  
  howManyScoresWeHaveForThatAthleteXApparatusCombination = length(outputOfCreateProperDataframe[[1]])
  
  #setting up appropriate "nugget"
  if (apparatusOfInterestHere == "HB"){
    if (howManyScoresWeHaveForThatAthleteXApparatusCombination < 4){
      nugget = nuggetHB*4
    }
    else{
      nugget = nuggetHB*2
    }
  }
  else if (apparatusOfInterestHere == "FX"){
    if (howManyScoresWeHaveForThatAthleteXApparatusCombination < 4){
      nugget = nuggetFX*4
    }
    else{
      nugget = nuggetFX*2
    }
  }
  else if (apparatusOfInterestHere == "PB"){
    if (howManyScoresWeHaveForThatAthleteXApparatusCombination < 4){
      nugget = nuggetPB*4
    }
    else{
      nugget = nuggetPB*2
    }
  }
  else if (apparatusOfInterestHere == "PH"){
    if (howManyScoresWeHaveForThatAthleteXApparatusCombination < 4){
      nugget = nuggetPH*4
    }
    else{
      nugget = nuggetPH*2
    }
  }    
  else if (apparatusOfInterestHere == "SR"){
    if (howManyScoresWeHaveForThatAthleteXApparatusCombination < 4){
      nugget = nuggetSR*4
    }
    else{
      nugget = nuggetSR*2
    }
  }
  else {
    if (howManyScoresWeHaveForThatAthleteXApparatusCombination < 4){
      nugget = nuggetVT*4
    }
    else{
      nugget = nuggetVT*2
    }
  }

  
  kernelLowerLimit = max(minAndMaxScores2DTable$apparatusOfInterestHere$min - nugget, 0)
  kernelUpperLimit = min(minAndMaxScores2DTable$apparatusOfInterestHere$max + nugget, 15.7)
  
  
  almostToReturn <- bkde(x = outputOfCreateProperDataframe[[1]], kernel = "normal", canonical = FALSE, bandwidth = bandwidthValue, gridsize = 401L, range.x = c(kernelLowerLimit, kernelUpperLimit), truncate = TRUE)
  #range.x = c(kernelLowerLimit, kernelUpperLimit)
  dataframeToReturn <- data.frame(
    x = almostToReturn$x, 
    y = almostToReturn$y
  )
  
  return(dataframeToReturn)
}

```




## HELPER FUNCTION: createCDFfromKDEandDrawONEscore
```{r}
createCDFfromKDEandDrawONEscore <- function(dataframeReturnedByestimateKernelDensity){
  # Create a CDF from the KDE
  kde_y_cumsum <- cumsum(dataframeReturnedByestimateKernelDensity$y)
  cdf <- kde_y_cumsum / max(kde_y_cumsum)
  
  
  u <- runif(1)  # Generate uniform random number
  sampled_value <- dataframeReturnedByestimateKernelDensity$x[which.min(abs(cdf - u))]
  
  return(sampled_value)
  
  
}
```



## OVERALL ALGO: runOlympicsNTimes
```{r}
# OVERALL ALGO: runOlympicsNTimes
# input: n
# uses all sorts of helper functions


runOlympicsNTimes <- function(n, allMenHBParticipants, allMenFXParticipants, allMenPBParticipants, allMenPHParticipants, allMenSRParticipants, allMenVTParticipants){

  # 1. running the Men's HB n times
  HBParticipants_copied <- allMenHBParticipants
  
  HBParticipants_copied$SimulationResults <- lapply(1:nrow(HBParticipants_copied), function(x) vector("list", n))
  for (nthOlympic in 1:n){
    
    # each nthOlympic-iteration of the Olympics, this is filling out the nthOlympic-index of each athlete's SimulationResults vector
    for (i in 1:nrow(HBParticipants_copied)) {
      row <- HBParticipants_copied[i, ]
      toAdd <- createCDFfromKDEandDrawONEscore(estimateKernelDensity(createProperDataframe(countryCode = row$Country, athleteName = row$FullName, apparatusInitials = row$Apparatus), 0.25))
    
      HBParticipants_copied[i, ]$SimulationResults[[1]][[nthOlympic]] <- toAdd
    }
    print(paste(nthOlympic, "th olympic done for Men's HB"))
    
  }
  
  
  
  # 2. running the Men's FX n times
  FXParticipants_copied <- allMenFXParticipants
  
  FXParticipants_copied$SimulationResults <- lapply(1:nrow(FXParticipants_copied), function(x) vector("list", n))
  for (nthOlympic in 1:n){
    
    # each nthOlympic-iteration of the Olympics, this is filling out the nthOlympic-index of each athlete's SimulationResults vector
    for (i in 1:nrow(FXParticipants_copied)) {
      row <- FXParticipants_copied[i, ]
      toAdd <- createCDFfromKDEandDrawONEscore(estimateKernelDensity(createProperDataframe(countryCode = row$Country, athleteName = row$FullName, apparatusInitials = row$Apparatus), 0.25))
    
      FXParticipants_copied[i, ]$SimulationResults[[1]][[nthOlympic]] <- toAdd
    }
    print(paste(nthOlympic, "th olympic done for Men's FX"))
    
  }
  
  #return(FXParticipants_copied)
  
  
  
  
  # 3. running the Men's PB n times
  PBParticipants_copied <- allMenPBParticipants
  
  PBParticipants_copied$SimulationResults <- lapply(1:nrow(PBParticipants_copied), function(x) vector("list", n))
  for (nthOlympic in 1:n){
    
    # each nthOlympic-iteration of the Olympics, this is filling out the nthOlympic-index of each athlete's SimulationResults vector
    for (i in 1:nrow(PBParticipants_copied)) {
      row <- PBParticipants_copied[i, ]
      toAdd <- createCDFfromKDEandDrawONEscore(estimateKernelDensity(createProperDataframe(countryCode = row$Country, athleteName = row$FullName, apparatusInitials = row$Apparatus), 0.25))
    
      PBParticipants_copied[i, ]$SimulationResults[[1]][[nthOlympic]] <- toAdd
    }
    print(paste(nthOlympic, "th olympic done for Men's PB"))
    
  }
  
  #return(PBParticipants_copied)
  
  
  
    # 4. running the Men's PH n times
  PHParticipants_copied <- allMenPHParticipants
  
  PHParticipants_copied$SimulationResults <- lapply(1:nrow(PHParticipants_copied), function(x) vector("list", n))
  for (nthOlympic in 1:n){
    
    # each nthOlympic-iteration of the Olympics, this is filling out the nthOlympic-index of each athlete's SimulationResults vector
    for (i in 1:nrow(PHParticipants_copied)) {
      row <- PHParticipants_copied[i, ]
      toAdd <- createCDFfromKDEandDrawONEscore(estimateKernelDensity(createProperDataframe(countryCode = row$Country, athleteName = row$FullName, apparatusInitials = row$Apparatus), 0.25))
    
      PHParticipants_copied[i, ]$SimulationResults[[1]][[nthOlympic]] <- toAdd
    }
    print(paste(nthOlympic, "th olympic done for Men's PH"))
    
  }
  
    
    # 5. running the Men's SR n times
  SRParticipants_copied <- allMenSRParticipants
  
  SRParticipants_copied$SimulationResults <- lapply(1:nrow(SRParticipants_copied), function(x) vector("list", n))
  for (nthOlympic in 1:n){
    
    # each nthOlympic-iteration of the Olympics, this is filling out the nthOlympic-index of each athlete's SimulationResults vector
    for (i in 1:nrow(SRParticipants_copied)) {
      row <- SRParticipants_copied[i, ]
      toAdd <- createCDFfromKDEandDrawONEscore(estimateKernelDensity(createProperDataframe(countryCode = row$Country, athleteName = row$FullName, apparatusInitials = row$Apparatus), 0.25))
    
      SRParticipants_copied[i, ]$SimulationResults[[1]][[nthOlympic]] <- toAdd
    }
    print(paste(nthOlympic, "th olympic done for Men's SR"))
    
  }
  
  
  
  # 4. running the Men's VT n times
  VTParticipants_copied <- allMenVTParticipants
  
  VTParticipants_copied$SimulationResults <- lapply(1:nrow(VTParticipants_copied), function(x) vector("list", n))
  for (nthOlympic in 1:n){
    
    # each nthOlympic-iteration of the Olympics, this is filling out the nthOlympic-index of each athlete's SimulationResults vector
    for (i in 1:nrow(VTParticipants_copied)) {
      row <- VTParticipants_copied[i, ]
      toAdd <- createCDFfromKDEandDrawONEscore(estimateKernelDensity(createProperDataframe(countryCode = row$Country, athleteName = row$FullName, apparatusInitials = row$Apparatus), 0.25))
    
      VTParticipants_copied[i, ]$SimulationResults[[1]][[nthOlympic]] <- toAdd
    }
    print(paste(nthOlympic, "th olympic done for Men's VT"))
    
  }
  
  #return(VTParticipants_copied)
  
  
  
  
  # RETURN A LIST CONTAINING FOUR DATAFRAMES
  return(list(HBResults = HBParticipants_copied, FXResults = FXParticipants_copied, PBResults = PBParticipants_copied, PHResults = PHParticipants_copied, SRResults = SRParticipants_copied, VTResults = VTParticipants_copied))
  
  
}


```




## EXAMPLE WAY OF UTILIZING runOlympicsNTimes (all commented out below)
```{r}
# sanityCheck: runOlympicsNTimes
set.seed(1)
test_samples = runOlympicsNTimes(1, allMenHBParticipants, allMenFXParticipants, allMenPBParticipants, allMenPHParticipants, allMenSRParticipants, allMenVTParticipants)
```


## Team All-Around Function

*Function*

[rules](https://www.nbcolympics.com/news/gymnastics-101-competition-format#:~:text=The%20highest%20cumulative%20team%20score,%2C%20silver%2C%20and%20bronze%20medals.&text=The%2024%20gymnasts%20with%20the,the%20individual%20all%2Daround%20final.)

```{r}
# helper: function for finding top 5 athletes in each apparatus by Country
candidates <- function(iter, main_df, HB, FX, PB, PH, SR, VT){
  olympics = list()
  all = rbind(HB, FX, PB, PH, SR, VT)
  
  for (i in 1:iter){
    # high bar
    HB_candids_names <- HB %>%
      filter(iteration == sprintf("SimulationResults_%s", i)) %>%
      group_by(Country) %>%
      arrange(desc(value)) %>%
      slice(1:3) %>%
      ungroup() %>%
      pull(FullName)
    
    # we want to get all of the data for our candidates #
    HB_candids_data <- main_df %>%
      filter(iteration == sprintf("SimulationResults_%s", i) & FullName %in% HB_candids_names)
    
    olympics[[sprintf('sim%s', i)]] = HB_candids_data
    
    # FLOOR
    FX_candids_names <- FX %>%
      filter(iteration == sprintf("SimulationResults_%s", i)) %>%
      group_by(Country) %>%
      arrange(desc(value)) %>%
      slice(1:3) %>%
      ungroup() %>%
      pull(FullName)
    
    FX_candids_data <- main_df %>%
      filter(iteration == sprintf("SimulationResults_%s", i) & FullName %in% FX_candids_names)
    
    # remove duplicate observations as we go #
    olympics[[sprintf('sim%s', i)]] = rbind(olympics[[sprintf('sim%s', i)]], FX_candids_data) %>% distinct(.keep_all = TRUE)
    
    # floor
    PB_candids_names <- PB %>%
      filter(iteration == sprintf("SimulationResults_%s", i)) %>%
      group_by(Country) %>%
      arrange(desc(value)) %>%
      slice(1:3) %>%
      ungroup() %>%
      pull(FullName)
    
     PB_candids_data <- main_df %>%
      filter(iteration == sprintf("SimulationResults_%s", i) & FullName %in% PB_candids_names)
     
    olympics[[sprintf('sim%s', i)]] = rbind(olympics[[sprintf('sim%s', i)]], PB_candids_data) %>% distinct(.keep_all = TRUE)
    
        # pommel horse
    PH_candids_names <- PH %>%
      filter(iteration == sprintf("SimulationResults_%s", i)) %>%
      group_by(Country) %>%
      arrange(desc(value)) %>%
      slice(1:3) %>%
      ungroup() %>%
      pull(FullName)
    
    PH_candids_data <- main_df %>%
      filter(iteration == sprintf("SimulationResults_%s", i) & FullName %in% PH_candids_names)
    
    olympics[[sprintf('sim%s', i)]] = rbind(olympics[[sprintf('sim%s', i)]], PH_candids_data) %>% distinct(.keep_all = TRUE)
    
    
            # still rings
    SR_candids_names <- SR %>%
      filter(iteration == sprintf("SimulationResults_%s", i)) %>%
      group_by(Country) %>%
      arrange(desc(value)) %>%
      slice(1:3) %>%
      ungroup() %>%
      pull(FullName)
    
    SR_candids_data <- main_df %>%
      filter(iteration == sprintf("SimulationResults_%s", i) & FullName %in% SR_candids_names)
    
    olympics[[sprintf('sim%s', i)]] = rbind(olympics[[sprintf('sim%s', i)]], SR_candids_data) %>% distinct(.keep_all = TRUE)
    
    # vault
    VT_candids_names <- VT %>%
      filter(iteration == sprintf("SimulationResults_%s", i)) %>%
      group_by(Country) %>%
      arrange(desc(value)) %>%
      slice(1:3) %>%
      ungroup() %>%
      pull(FullName)
    
    VT_candids_data <- main_df %>%
      filter(iteration == sprintf("SimulationResults_%s", i) & FullName %in% VT_candids_names)
    
    olympics[[sprintf('sim%s', i)]] = rbind(olympics[[sprintf('sim%s', i)]], VT_candids_data) %>% distinct(.keep_all = TRUE)
    
  }
  
  return(olympics)
}
```



```{r}
# helper: function to get best scores for each team for each country
team_scores <- function(teams, country_data){
  # collect best score for each team
  best_scores <- c()
  
  for (i in 1:nrow(teams)){
    
    # sum of best 3 HB scores
    HB_score <- country_data %>%
      filter(FullName %in% teams[i,]) %>%
      arrange(desc(HB)) %>%
      slice(1:3) %>%
      summarise(total = sum(HB)) %>%
      pull()
    
    # sum of best 3 FX scores
    FX_score <- country_data %>%
      filter(FullName %in% teams[i,]) %>%
      arrange(desc(FX)) %>%
      slice(1:3) %>%
      summarise(total = sum(FX)) %>%
      pull()
    
    # sum of best 3 PB scores
    PB_score <- country_data %>%
      filter(FullName %in% teams[i,]) %>%
      arrange(desc(PB)) %>%
      slice(1:3) %>%
      summarise(total = sum(PB)) %>%
      pull()
    
        # sum of best 3 PH scores
    PH_score <- country_data %>%
      filter(FullName %in% teams[i,]) %>%
      arrange(desc(PH)) %>%
      slice(1:3) %>%
      summarise(total = sum(PH)) %>%
      pull()
    
            # sum of best 3 SR scores
    SR_score <- country_data %>%
      filter(FullName %in% teams[i,]) %>%
      arrange(desc(SR)) %>%
      slice(1:3) %>%
      summarise(total = sum(SR)) %>%
      pull()
    
    # sum of best 3 VT scores
    VT_score <- country_data %>%
      filter(FullName %in% teams[i,]) %>%
      arrange(desc(VT)) %>%
      slice(1:3) %>%
      summarise(total = sum(VT)) %>%
      pull()
    
    best_scores <- c(best_scores, sum(HB_score, FX_score, PB_score, PH_score, SR_score, VT_score, na.rm = T))
  }
  
  return(best_scores)
}
```

```{r}
# main function: return a list of data frames with the best score for each possible teams for each country. Each element in the list is a new iteration 
get_team_scores <- function(iter, samples){
  all_team_scores <- c()
  
  # 0. get simulation names
  sims <- c()
  for (i in 1:iter){
    sims <- c(sims, sprintf("SimulationResults_%s", i))
  }
  
  print("just got names")
  
  # 1. filter by eligible athletes 
  df_HB_eligible <- samples$HBResults %>%
    filter(type == "full team")
  
  df_FX_eligible <- samples$FXResults %>%
    filter(type == "full team")
  
  df_PB_eligible <- samples$PBResults %>%
    filter(type == "full team")
  
  df_PH_eligible <- samples$PHResults %>%
    filter(type == "full team")
    
  df_SR_eligible <- samples$SRResults %>%
    filter(type == "full team")
  
  df_VT_eligible <- samples$VTResults %>%
    filter(type == "full team")
  
  # 2. Remake data frames so they are easier to work with 
  df_HB_eligible <- df_HB_eligible %>%
    unnest_wider(SimulationResults, names_sep = "_") %>%
    pivot_longer(cols = sims, names_to = "iteration")
  
  df_FX_eligible <- df_FX_eligible %>%
    unnest_wider(SimulationResults, names_sep = "_") %>%
    pivot_longer(cols = sims, names_to = "iteration")
  
  df_PB_eligible <- df_PB_eligible %>%
    unnest_wider(SimulationResults, names_sep = "_") %>%
    pivot_longer(cols = sims, names_to = "iteration")
  
  df_PH_eligible <- df_PH_eligible %>%
    unnest_wider(SimulationResults, names_sep = "_") %>%
    pivot_longer(cols = sims, names_to = "iteration")
  
    
  df_SR_eligible <- df_SR_eligible %>%
    unnest_wider(SimulationResults, names_sep = "_") %>%
    pivot_longer(cols = sims, names_to = "iteration")
  
    
  df_VT_eligible <- df_VT_eligible %>%
    unnest_wider(SimulationResults, names_sep = "_") %>%
    pivot_longer(cols = sims, names_to = "iteration")
  
  # 2a. add all of the data frames together
  all_eligible <- rbind(df_HB_eligible, df_PB_eligible, df_PH_eligible, df_FX_eligible, df_SR_eligible, df_VT_eligible)
  
  # 3. Find top candidates for each team by country (top 3 for each apparatus)
  print("just getting candidates")
  top_candidates <- candidates(iter, all_eligible, df_HB_eligible, df_PB_eligible, df_PH_eligible, df_FX_eligible, df_SR_eligible, df_VT_eligible)
  print("have candidates")
  
  ss <- top_candidates$sim1 %>%
    group_by(Country) %>%
    distinct(FullName) %>%
    summarise(n = n())
  
  view(ss)
  
  # 4. Get team scores for each country, for each iteration
  for (i in 1:iter){
    # 4a. get iteration
    olympics <- top_candidates[[sprintf("sim%s", i)]]
    olympics_data <- data.frame()
    countries = c("USA", "GBR", "CAN", "CHN", "ITA", "JPN", "GER", "TUR", "SUI", "UKR", "ESP"
                      )
    
    for (country in countries){
      df_country <- olympics %>%
        filter(Country == country) %>%
        pivot_wider(names_from = Apparatus, values_from = value)
      
      # 4b. get all possible teams
      print(country)
      possible_teams <-  data.frame(t(combn(df_country$FullName, 5)))
      possible_teams$Country <- country
      
      print("here")
      
      # 4c. get scores for each team
      scores <- team_scores(possible_teams, df_country)
      possible_teams$score <- scores
      
      # 4d. add data for this country to the main data frame
      olympics_data <- rbind(olympics_data, data.frame(possible_teams))
    }
    
    # 4e. get results
    results <- olympics_data %>%
      arrange(desc(score)) %>%
      distinct(Country, .keep_all = T) %>%
      mutate(rank = case_when(row_number() %in% c(1:3) ~ row_number(),
                              .default = 0),
             weight = case_when(rank == 1 ~ 3,
                                rank == 3 ~ 1,
                                .default = rank))
    
    # 4f. add simulation to list
    all_team_scores[[sprintf("sim%s", i)]] <- results
    
  }
  
  
  return(all_team_scores)
  
}

```


```{r}
get_sim_results <- function(iter, scores, country){
  # 1. make final df
  sim_results = c()
  
  # 2. get data for each simulation
  for (i in 1:iter){
    sim <- scores[[sprintf("sim%s", i)]]
    
    country_df <- sim %>%
      filter(Country == country)
    
    view(country_df)
    
    data =  c(Simulation = sprintf("sim%s", i), 
                        Member1 = country_df[,c('X1')], 
                        Member2 = country_df[,c('X2')], 
                        Member3 = country_df[,c('X3')], 
                        Member4 = country_df[,c('X4')], 
                        Member5 = country_df[,c('X5')], 
                        Score = country_df$score,
                        Rank = country_df$rank,
                        Weight = country_df$weight)
    

    sim_results = rbind(sim_results, data)
  }
  
  return(as.data.frame(sim_results))
}
```




## Example

```{r}
data_ready_for_algo %>%
  filter(Country == 'NED') %>%
  distinct(FullName)
```


```{r}
all_team_scores <- get_team_scores(1, test_samples)
```

```{r}
all_team_scores$sim1  
```


```{r}
get_sim_results(1, all_team_scores, "USA")
```

```{r}
all_team_scores
```
