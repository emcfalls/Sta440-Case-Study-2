---
title: "men_team_all_around_simulation_algo"
subtitle: "no subtitle"
author: "men_team_all_around_simulation_algo"
format: 
  html:
    self-contained: true
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F)
```
## Setup - run this first to get the libraries
```{r setup, include=FALSE}
library(tidyverse)
library(data.table)
library(ggplot2)
library(purrr)
library(dplyr)
library(KernSmooth)

## LOG INTO https://hypatia.stat.duke.edu USING NET ID AND PW AND THEN CLONE OUR REPO THERE AND THEN RUN THESE SIMULATION .QMD FILES

flexiblas::flexiblas_load_backend("OPENBLAS-THREADS") |>
  flexiblas::flexiblas_switch()
  flexiblas::flexiblas_set_num_threads(8)
```



## Getting Simulation Data (don't need to run)

```{r}
fx_sim <- read.csv("EZ Simulation Exports/Men_FXResults_1000_EZ.csv")
hb_sim <- read.csv("EZ Simulation Exports/Men_HBResults_1000_EZ.csv")
pb_sim <- read.csv("EZ Simulation Exports/Men_PBResults_1000_EZ.csv")
sr_sim <- read.csv("EZ Simulation Exports/Men_SRResults_1000_EZ.csv")
ph_sim <- read.csv("EZ Simulation Exports/Men_PHResults_1000_EZ.csv")
vt_sim <- read.csv("EZ Simulation Exports/Men_VTResults_1000_EZ.csv")
```

```{r}
# need to add athlete type
fx_sim <- fx_sim %>%
  mutate(type = case_when(Country %in% c("BRA", "KOR", "BEL") ~ "one person team" ,
                          # should override "one person team" for individuals who qualified and have a country that qualified
                          FullName %in%  c("KARIMI MILAD", "DOLGOPYAT ARTEM", "DAVTYAN ARTUR",
                           "MESZAROS KRISZTOFER", "MUNTEAN ANDREI", "LEE JUHNO", 
                          "JUHNO LEE", "KEYBUS LUKA", "VAN LUKA") ~ "individual",
                          .default = "full team"),
          SimulationResults = strsplit(SimulationResults, split = ","))

hb_sim <- hb_sim %>%
  mutate(type = case_when(Country %in% c("BRA", "KOR", "BEL") ~ "one person team" ,
                          # should override "one person team" for individuals who qualified and have a country that qualified
                          FullName %in%  c("KARIMI MILAD", "DOLGOPYAT ARTEM", "DAVTYAN ARTUR",
                           "MESZAROS KRISZTOFER", "MUNTEAN ANDREI", "LEE JUHNO", 
                          "JUHNO LEE", "KEYBUS LUKA", "VAN LUKA") ~ "individual",
                          .default = "full team"),
          SimulationResults = strsplit(SimulationResults, split = ","))

pb_sim <- pb_sim %>%
  mutate(type = case_when(Country %in% c("BRA", "KOR", "BEL") ~ "one person team" ,
                          # should override "one person team" for individuals who qualified and have a country that qualified
                          FullName %in%  c("KARIMI MILAD", "DOLGOPYAT ARTEM", "DAVTYAN ARTUR",
                           "MESZAROS KRISZTOFER", "MUNTEAN ANDREI", "LEE JUHNO", 
                          "JUHNO LEE", "KEYBUS LUKA", "VAN LUKA") ~ "individual",
                          .default = "full team"),
          SimulationResults = strsplit(SimulationResults, split = ","))

sr_sim <- sr_sim %>%
  mutate(type = case_when(Country %in% c("BRA", "KOR", "BEL") ~ "one person team" ,
                          # should override "one person team" for individuals who qualified and have a country that qualified
                          FullName %in%  c("KARIMI MILAD", "DOLGOPYAT ARTEM", "DAVTYAN ARTUR",
                           "MESZAROS KRISZTOFER", "MUNTEAN ANDREI", "LEE JUHNO", 
                          "JUHNO LEE", "KEYBUS LUKA", "VAN LUKA") ~ "individual",
                          .default = "full team"),
          SimulationResults = strsplit(SimulationResults, split = ","))

ph_sim <- ph_sim %>%
  mutate(type = case_when(Country %in% c("BRA", "KOR", "BEL") ~ "one person team" ,
                          # should override "one person team" for individuals who qualified and have a country that qualified
                          FullName %in%  c("KARIMI MILAD", "DOLGOPYAT ARTEM", "DAVTYAN ARTUR",
                           "MESZAROS KRISZTOFER", "MUNTEAN ANDREI", "LEE JUHNO", 
                          "JUHNO LEE", "KEYBUS LUKA", "VAN LUKA") ~ "individual",
                          .default = "full team"),
          SimulationResults = strsplit(SimulationResults, split = ","))

vt_sim <- vt_sim %>%
  mutate(type = case_when(Country %in% c("BRA", "KOR", "BEL") ~ "one person team" ,
                          # should override "one person team" for individuals who qualified and have a country that qualified
                          FullName %in%  c("KARIMI MILAD", "DOLGOPYAT ARTEM", "DAVTYAN ARTUR",
                           "MESZAROS KRISZTOFER", "MUNTEAN ANDREI", "LEE JUHNO", 
                          "JUHNO LEE", "KEYBUS LUKA", "VAN LUKA") ~ "individual",
                          .default = "full team"),
          SimulationResults = strsplit(SimulationResults, split = ","))
```

## Separating Dataframes (don't need to run)

```{r}
sims <- c()
  for (i in 1:1000){
    sims <- c(sims, sprintf("SimulationResults_%s", i))
  }

  df_HB_eligible <- hb_sim %>%
    filter(type == "full team") %>%
    unnest_wider(SimulationResults, names_sep = "_") %>%
    pivot_longer(cols = sims, names_to = "iteration")
  
  df_FX_eligible <- fx_sim %>%
    filter(type == "full team") %>%
    unnest_wider(SimulationResults, names_sep = "_") %>%
    pivot_longer(cols = sims, names_to = "iteration")
  
  df_PB_eligible <- pb_sim %>%
    filter(type == "full team") %>%
    unnest_wider(SimulationResults, names_sep = "_") %>%
    pivot_longer(cols = sims, names_to = "iteration")
  
  df_PH_eligible <-ph_sim %>%
    filter(type == "full team") %>%
    unnest_wider(SimulationResults, names_sep = "_") %>%
    pivot_longer(cols = sims, names_to = "iteration")
    
  df_SR_eligible <- sr_sim %>%
    filter(type == "full team") %>%
    unnest_wider(SimulationResults, names_sep = "_") %>%
    pivot_longer(cols = sims, names_to = "iteration")
  
  df_VT_eligible <- vt_sim %>%
    filter(type == "full team") %>%
    unnest_wider(SimulationResults, names_sep = "_") %>%
    pivot_longer(cols = sims, names_to = "iteration")
  
```

```{r}
all <- rbind(df_HB_eligible, df_FX_eligible, df_PB_eligible, df_VT_eligible, df_PH_eligible, df_SR_eligible)
```

```{r}
sims150 <- c()
  for (i in 1:150){
    sims150 <- c(sims150, sprintf("SimulationResults_%s", i))
  }

sims151_300 <- c()
  for (i in 151:300){
    sims151_300 <- c(sims151_300, sprintf("SimulationResults_%s", i))
  }

sims301_450 <- c()
  for (i in 301:450){
    sims301_450 <- c(sims301_450, sprintf("SimulationResults_%s", i))
  }

sims451_600 <- c()
  for (i in 451:600){
    sims451_600 <- c(sims451_600, sprintf("SimulationResults_%s", i))
  }

sims601_750 <- c()
  for (i in 601:750){
    sims601_750 <- c(sims601_750, sprintf("SimulationResults_%s", i))
  }

sims751_900 <- c()
  for (i in 751:900){
    sims751_900 <- c(sims751_900, sprintf("SimulationResults_%s", i))
  }

sims901 <- c()
  for (i in 901:1000){
    sims901 <- c(sims901, sprintf("SimulationResults_%s", i))
  }

data_150 <- all %>%
  filter(iteration %in% sims150)

data_151 <- all %>%
  filter(iteration %in% sims151_300)

data_301 <- all %>%
  filter(iteration %in% sims301_450)

data_451 <- all %>%
  filter(iteration %in% sims451_600)

data_601 <- all %>%
  filter(iteration %in% sims601_750)

data_751 <- all %>%
  filter(iteration %in% sims751_900)

data_901 <- all %>%
  filter(iteration %in% sims901)

```

```{r}
# saving dfs 
write.csv(data_150, "cleaned data/mens_simulation_150.csv") # Emily
write.csv(data_151, "cleaned data/mens_simulation_151_to_300.csv") # Evan
write.csv(data_301, "cleaned data/mens_simulation_301_450.csv") # Elyse
write.csv(data_451, "cleaned data/mens_simulation_451_to_600.csv") #Elyse
write.csv(data_601, "cleaned data/mens_simulation_601_to_750.csv") # Young
write.csv(data_751, "cleaned data/mens_simulation_751_to_900.csv") # Young
write.csv(data_901, "cleaned data/mens_simulation_901_to_1000.csv") # Young
```


## *IMPORTANT* Splitting the data for the function (replace data_150 with your own df)

```{r}
main <- rbind(data_301, data_451)
```


```{r}
hb <- main %>%
  filter(Apparatus == "HB")

pb <- main %>%
  filter(Apparatus == "PB")

ph <- main %>%
  filter(Apparatus == "PH")

vt <- main %>%
  filter(Apparatus == "VT")

sr <- main %>%
  filter(Apparatus == "SR")

fx <- main %>%
  filter(Apparatus == "FX")
```


## Team All-Around Function (run this)

*Function*

[rules](https://www.nbcolympics.com/news/gymnastics-101-competition-format#:~:text=The%20highest%20cumulative%20team%20score,%2C%20silver%2C%20and%20bronze%20medals.&text=The%2024%20gymnasts%20with%20the,the%20individual%20all%2Daround%20final.)

```{r}
# helper: function for finding top 5 athletes in each apparatus by Country
candidates <- function(start_iter, stop_iter, main_df, HB, FX, PB, PH, SR, VT){
  olympics = list()
  all = rbind(HB, FX, PB, PH, SR, VT)
  
  for (i in start_iter:stop_iter){
    # high bar
    HB_candids_names <- HB %>%
      filter(iteration == sprintf("SimulationResults_%s", i)) %>%
      group_by(Country) %>%
      arrange(desc(value)) %>%
      slice(1:3) %>%
      ungroup() %>%
      pull(FullName)
    
    # we want to get all of the data for our candidates #
    HB_candids_data <- main_df %>%
      filter(iteration == sprintf("SimulationResults_%s", i) & FullName %in% HB_candids_names)
    
    olympics[[sprintf('sim%s', i)]] = HB_candids_data
    
    # FLOOR
    FX_candids_names <- FX %>%
      filter(iteration == sprintf("SimulationResults_%s", i)) %>%
      group_by(Country) %>%
      arrange(desc(value)) %>%
      slice(1:3) %>%
      ungroup() %>%
      pull(FullName)
    
    FX_candids_data <- main_df %>%
      filter(iteration == sprintf("SimulationResults_%s", i) & FullName %in% FX_candids_names)
    
    # remove duplicate observations as we go #
    olympics[[sprintf('sim%s', i)]] = rbind(olympics[[sprintf('sim%s', i)]], FX_candids_data) %>% distinct(.keep_all = TRUE)
    
    # floor
    PB_candids_names <- PB %>%
      filter(iteration == sprintf("SimulationResults_%s", i)) %>%
      group_by(Country) %>%
      arrange(desc(value)) %>%
      slice(1:3) %>%
      ungroup() %>%
      pull(FullName)
    
     PB_candids_data <- main_df %>%
      filter(iteration == sprintf("SimulationResults_%s", i) & FullName %in% PB_candids_names)
     
    olympics[[sprintf('sim%s', i)]] = rbind(olympics[[sprintf('sim%s', i)]], PB_candids_data) %>% distinct(.keep_all = TRUE)
    
        # pommel horse
    PH_candids_names <- PH %>%
      filter(iteration == sprintf("SimulationResults_%s", i)) %>%
      group_by(Country) %>%
      arrange(desc(value)) %>%
      slice(1:3) %>%
      ungroup() %>%
      pull(FullName)
    
    PH_candids_data <- main_df %>%
      filter(iteration == sprintf("SimulationResults_%s", i) & FullName %in% PH_candids_names)
    
    olympics[[sprintf('sim%s', i)]] = rbind(olympics[[sprintf('sim%s', i)]], PH_candids_data) %>% distinct(.keep_all = TRUE)
    
    
            # still rings
    SR_candids_names <- SR %>%
      filter(iteration == sprintf("SimulationResults_%s", i)) %>%
      group_by(Country) %>%
      arrange(desc(value)) %>%
      slice(1:3) %>%
      ungroup() %>%
      pull(FullName)
    
    SR_candids_data <- main_df %>%
      filter(iteration == sprintf("SimulationResults_%s", i) & FullName %in% SR_candids_names)
    
    olympics[[sprintf('sim%s', i)]] = rbind(olympics[[sprintf('sim%s', i)]], SR_candids_data) %>% distinct(.keep_all = TRUE)
    
    # vault
    VT_candids_names <- VT %>%
      filter(iteration == sprintf("SimulationResults_%s", i)) %>%
      group_by(Country) %>%
      arrange(desc(value)) %>%
      slice(1:3) %>%
      ungroup() %>%
      pull(FullName)
    
    VT_candids_data <- main_df %>%
      filter(iteration == sprintf("SimulationResults_%s", i) & FullName %in% VT_candids_names)
    
    olympics[[sprintf('sim%s', i)]] = rbind(olympics[[sprintf('sim%s', i)]], VT_candids_data) %>% distinct(.keep_all = TRUE)
    
  }
  
  return(olympics)
}
```



```{r}
# helper: function to get best scores for each team for each country
team_scores <- function(teams, country_data){
  # collect best score for each team
  best_scores <- c()
  
   # checking if all apparatuses are in the data, if not -> add
  cols <- colnames(country_data)
 
  if(!("PB" %in% cols)){
    country_data <- country_data %>%
      mutate(PB = 0)
  } 
  
  if(!("PH" %in% cols)){
    country_data <- country_data %>%
      mutate(PH = 0)
  } 
  
  if(!("FX" %in% cols)){
    country_data <- country_data %>%
      mutate(FX = 0)
  } 
  
  if(!("VT" %in% cols)){
    country_data <- country_data %>%
      mutate(VT = 0)
  } 
  
  if(!("HB" %in% cols)){
    country_data <- country_data %>%
      mutate(HB = 0)
  } 
  
  if(!("SR" %in% cols)){
    country_data <- country_data %>%
      mutate(SR = 0)
  } 
  
  for (i in 1:nrow(teams)){
    
    # sum of best 3 HB scores
    HB_score <- country_data %>%
      filter(FullName %in% teams[i,]) %>%
      mutate(HB = as.numeric(HB)) %>%
      arrange(desc(HB)) %>%
      slice(1:3) %>%
      summarise(total = sum(HB)) %>%
      pull()
    
    # sum of best 3 FX scores
    FX_score <- country_data %>%
      filter(FullName %in% teams[i,]) %>%
      mutate(FX = as.numeric(FX)) %>%
      arrange(desc(FX)) %>%
      slice(1:3) %>%
      summarise(total = sum(FX)) %>%
      pull()
    
    # sum of best 3 PB scores
    PB_score <- country_data %>%
      filter(FullName %in% teams[i,]) %>%
      mutate(PB = as.numeric(PB)) %>%
      arrange(desc(PB)) %>%
      slice(1:3) %>%
      summarise(total = sum(PB)) %>%
      pull()
    
        # sum of best 3 PH scores
    PH_score <- country_data %>%
      filter(FullName %in% teams[i,]) %>%
      mutate(PH = as.numeric(PH)) %>%
      arrange(desc(PH)) %>%
      slice(1:3) %>%
      summarise(total = sum(PH)) %>%
      pull()
    
            # sum of best 3 SR scores
    SR_score <- country_data %>%
      filter(FullName %in% teams[i,]) %>%
      mutate(SR = as.numeric(SR)) %>%
      arrange(desc(SR)) %>%
      slice(1:3) %>%
      summarise(total = sum(SR)) %>%
      pull()
    
    # sum of best 3 VT scores
    VT_score <- country_data %>%
      filter(FullName %in% teams[i,]) %>%
      mutate(VT = as.numeric(VT)) %>%
      arrange(desc(VT)) %>%
      slice(1:3) %>%
      summarise(total = sum(VT)) %>%
      pull()
    
    best_scores <- c(best_scores, sum(HB_score, FX_score, PB_score, PH_score, SR_score, VT_score, na.rm = T))
  }
  
  return(best_scores)
}
```

```{r}
# main function: return a list of data frames with the best score for each possible teams for each country. Each element in the list is a new iteration 
get_team_scores <- function(start_iter, stop_iter, hb, fx, pb, ph, sr, vt){
  print("function started")
  all_team_scores <- c()
  
  # 2a. add all of the data frames together
  all_eligible <- rbind(hb, fx, pb, ph, sr, vt)
  
  # 3. Find top candidates for each team by country (top 3 for each apparatus)
  top_candidates <- candidates(start_iter, stop_iter, all_eligible, hb, fx, pb, ph, sr, vt)

  
  # 4. Get team scores for each country, for each iteration
  for (i in start_iter:stop_iter){
    # 4a. get iteration
    olympics <- top_candidates[[sprintf("sim%s", i)]]
    olympics_data <- data.frame()
    countries = c("USA", "GBR", "CAN", "CHN", "ITA", "JPN", "GER", "TUR", "SUI", "UKR", "ESP"
                      )
    
    for (country in countries){
      df_country <- olympics %>%
        filter(Country == country) %>%
        pivot_wider(names_from = Apparatus, values_from = value)
      
      # checking for countries that have less than 5 people
      n_athletes <- df_country %>%
        distinct(FullName) %>%
        summarise(n = n()) %>%
        pull()
    
      
      team_size = 5
      
      if(n_athletes<5){
        team_size = n_athletes
      }
  
      # 4b. get all possible teams
      possible_teams <-  data.frame(t(combn(unique(df_country$FullName),  team_size)))
      possible_teams$Country <- country
      
      if (n_athletes < 5){
        
        if(n_athletes == 4){
          possible_teams <- possible_teams %>%
            mutate(X5 = NaN)
        }
        
        else {
          possible_teams <- possible_teams %>%
            mutate(X4 = NaN, X5 = NaN)
        }
      }
      
      
      # 4c. get scores for each team
      scores <- team_scores(possible_teams, df_country)
      possible_teams$score <- scores
      
      # 4d. add data for this country to the main data frame
      olympics_data <- rbind(olympics_data, data.frame(possible_teams))
    }
    
    # 4e. get results
    results <- olympics_data %>%
      arrange(desc(score)) %>%
      distinct(Country, .keep_all = T) %>%
      mutate(rank = row_number(),
             weight = case_when(rank == 1 ~ 3,
                                rank == 2 ~ 2,
                                rank == 3 ~ 1,
                                .default = 0))
    
    # 4f. add simulation to list
    all_team_scores[[sprintf("sim%s", i)]] <- results
    print(sprintf("added simulation #%s", i))
    
  }
  
  
  return(all_team_scores)
  
}

```


```{r}
get_sim_results <- function(start_iter, stop_iter, scores, country){
  # 1. make final df
  sim_results = c()
  
  # 2. get data for each simulation
  for (i in start_iter:stop_iter){
    sim <- scores[[sprintf("sim%s", i)]]
    
    country_df <- sim %>%
      filter(Country == country)
    
    view(country_df)
    
    data =  c(Simulation = sprintf("sim%s", i), 
                        Member1 = country_df[,c('X1')], 
                        Member2 = country_df[,c('X2')], 
                        Member3 = country_df[,c('X3')], 
                        Member4 = country_df[,c('X4')], 
                        Member5 = country_df[,c('X5')], 
                        Score = country_df$score,
                        Rank = country_df$rank,
                        Weight = country_df$weight)
    

    sim_results = rbind(sim_results, data)
  }
  
  return(as.data.frame(sim_results))
}
```



 
## Example (run this)

```{r}
# once you break up the dfs by apparatus, just run this
all_team_scores <- get_team_scores(301, 450, hb, fx, pb, ph, sr, vt)
```

```{r}
# example of result from sim1
all_team_scores$sim1  
```


```{r}
# run and save sim results from USA to csv under folder "simulaiton results"
get_sim_results(301, 450, all_team_scores, "USA")
```
