---
title: "women_team_all_around_simulation_algo"
subtitle: "no subtitle"
author: "women_team_all_around_simulation_algo"
format:
  html:
    self-contained: true
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
## Setup - run this first to get the libraries
```{r setup, include=FALSE}
library(tidyverse)
library(data.table)
library(ggplot2)
library(purrr)
library(dplyr)
library(KernSmooth)

```

```{r}
flexiblas::flexiblas_load_backend("OPENBLAS-THREADS") |>
  flexiblas::flexiblas_switch()
  flexiblas::flexiblas_set_num_threads(8)
```


## Getting Simulation Data

```{r}
bb_sim <- read.csv("EZ Simulation Exports/women_BB_1000_EZ.csv")
ub_sim <- read.csv("EZ Simulation Exports/women_UB_1000_EZ.csv")
fx_sim <- read.csv("EZ Simulation Exports/women_FX_1000_EZ.csv")
vt_sim <- read.csv("EZ Simulation Exports/women_VT_1000_EZ.csv")
```

```{r}
# need to add athlete type
bb_sim <- bb_sim %>%
  mutate(type = case_when(Country %in% c("GER", "MEX", "HUN") ~ "one person team" ,
                          # should override "one person team" for individuals who qualified and have a country that qualified
                          FullName %in%  c("NEMOUR KAYLIA", "SCHAEFER PAULINE", "MORENO ALEXA",
                         "MARTINS FILIPA", "FINNEGAN ALEAH", "CZIFRA BETTINA",
                         "PETISCO ALBA", "LASHCHEVSKA ANNA", "BICKEL LENA",
                         "HERON HILLARY", "ROOSKRANTZ CAITLIN", "ARTAMONOVA SONA",
                         "RAZ LIHIE", "HRIBAR LUCIJA") ~ "individual",
                          .default = "full team"),
         SimulationResults = strsplit(SimulationResults, split = ","))

ub_sim <- ub_sim %>%
  mutate(type = case_when(Country %in% c("GER", "MEX", "HUN") ~ "one person team" ,
                          # should override "one person team" for individuals who qualified and have a country that qualified
                          FullName %in%  c("NEMOUR KAYLIA", "SCHAEFER PAULINE", "MORENO ALEXA",
                         "MARTINS FILIPA", "FINNEGAN ALEAH", "CZIFRA BETTINA",
                         "PETISCO ALBA", "LASHCHEVSKA ANNA", "BICKEL LENA",
                         "HERON HILLARY", "ROOSKRANTZ CAITLIN", "ARTAMONOVA SONA",
                         "RAZ LIHIE", "HRIBAR LUCIJA") ~ "individual",
                          .default = "full team"),
         SimulationResults = strsplit(SimulationResults, split = ","))

fx_sim <- fx_sim %>%
  mutate(type = case_when(Country %in% c("GER", "MEX", "HUN") ~ "one person team" ,
                          # should override "one person team" for individuals who qualified and have a country that qualified
                          FullName %in%  c("NEMOUR KAYLIA", "SCHAEFER PAULINE", "MORENO ALEXA",
                         "MARTINS FILIPA", "FINNEGAN ALEAH", "CZIFRA BETTINA",
                         "PETISCO ALBA", "LASHCHEVSKA ANNA", "BICKEL LENA",
                         "HERON HILLARY", "ROOSKRANTZ CAITLIN", "ARTAMONOVA SONA",
                         "RAZ LIHIE", "HRIBAR LUCIJA") ~ "individual",
                          .default = "full team"),
         SimulationResults = strsplit(SimulationResults, split = ","))

vt_sim <- vt_sim %>%
  mutate(type = case_when(Country %in% c("GER", "MEX", "HUN") ~ "one person team" ,
                          # should override "one person team" for individuals who qualified and have a country that qualified
                          FullName %in%  c("NEMOUR KAYLIA", "SCHAEFER PAULINE", "MORENO ALEXA",
                         "MARTINS FILIPA", "FINNEGAN ALEAH", "CZIFRA BETTINA",
                         "PETISCO ALBA", "LASHCHEVSKA ANNA", "BICKEL LENA",
                         "HERON HILLARY", "ROOSKRANTZ CAITLIN", "ARTAMONOVA SONA",
                         "RAZ LIHIE", "HRIBAR LUCIJA") ~ "individual",
                          .default = "full team"),
         SimulationResults = strsplit(SimulationResults, split = ","))
```


## Team All-Around Function

*Function*

[rules](https://www.nbcolympics.com/news/gymnastics-101-competition-format#:~:text=The%20highest%20cumulative%20team%20score,%2C%20silver%2C%20and%20bronze%20medals.&text=The%2024%20gymnasts%20with%20the,the%20individual%20all%2Daround%20final.)

```{r}
x = 4
print(1:4)
```


```{r}
# helper: function for finding top 5 athletes in each apparatus by Country
candidates <- function(iter, main_df, bb, ub, fx, vt){
  olympics = list()
  all = rbind(bb, ub, fx, vt)
 
  for (i in 1:iter){
    # balance beam
    bb_candids_names <- bb %>%
      filter(iteration == sprintf("SimulationResults_%s", i)) %>%
      group_by(Country) %>%
      arrange(desc(value)) %>%
      slice(1:3) %>%
      ungroup() %>%
      pull(FullName)
   
    # we want to get all of the data for our candidates #
    bb_candids_data <- main_df %>%
      filter(iteration == sprintf("SimulationResults_%s", i) & FullName %in% bb_candids_names)
   
    olympics[[sprintf('sim%s', i)]] = bb_candids_data
   
    # uneven bars
    ub_candids_names <- ub %>%
      filter(iteration == sprintf("SimulationResults_%s", i)) %>%
      group_by(Country) %>%
      arrange(desc(value)) %>%
      slice(1:3) %>%
      ungroup() %>%
      pull(FullName)
   
    ub_candids_data <- main_df %>%
      filter(iteration == sprintf("SimulationResults_%s", i) & FullName %in% ub_candids_names)
   
    # remove duplicate observations as we go #
    olympics[[sprintf('sim%s', i)]] = rbind(olympics[[sprintf('sim%s', i)]], ub_candids_data) %>% distinct(.keep_all = TRUE)
   
    # floor
    fx_candids_names <- fx %>%
      filter(iteration == sprintf("SimulationResults_%s", i)) %>%
      group_by(Country) %>%
      arrange(desc(value)) %>%
      slice(1:3) %>%
      ungroup() %>%
      pull(FullName)
   
     fx_candids_data <- main_df %>%
      filter(iteration == sprintf("SimulationResults_%s", i) & FullName %in% fx_candids_names)
     
    olympics[[sprintf('sim%s', i)]] = rbind(olympics[[sprintf('sim%s', i)]], fx_candids_data) %>% distinct(.keep_all = TRUE)
   
    # vault
    vt_candids_names <- vt %>%
      filter(iteration == sprintf("SimulationResults_%s", i)) %>%
      group_by(Country) %>%
      arrange(desc(value)) %>%
      slice(1:3) %>%
      ungroup() %>%
      pull(FullName)
   
    vt_candids_data <- main_df %>%
      filter(iteration == sprintf("SimulationResults_%s", i) & FullName %in% vt_candids_names)
   
    olympics[[sprintf('sim%s', i)]] = rbind(olympics[[sprintf('sim%s', i)]], vt_candids_data) %>% distinct(.keep_all = TRUE)
   
  }
 
  return(olympics)
}
```

```{r}
# helper: function to get best scores for each team for each country
team_scores <- function(teams, country_data){
  # collect best score for each team
  best_scores <- c()
 
  # checking if all apparatuses are in the data, if not -> return 0
  cols <- colnames(country_data)
 
  if(!("BB" %in% cols)){
    country_data <- country_data %>%
      mutate(BB = 0)
  }
 
  if(!("UB" %in% cols)){
    country_data <- country_data %>%
      mutate(UB = 0)
  }
 
  if(!("FX" %in% cols)){
    country_data <- country_data %>%
      mutate(FX = 0)
  }
 
  if(!("VT" %in% cols)){
    country_data <- country_data %>%
      mutate(VT = 0)
  }
 
  for (i in 1:nrow(teams)){
   
    # sum of best 3 BB scores
    bb_score <- country_data %>%
      filter(FullName %in% teams[i,]) %>%
      mutate(BB = as.numeric(BB)) %>%
      arrange(desc(BB)) %>%
      slice(1:3) %>%
      summarise(total = sum(BB)) %>%
      pull()
   
    # sum of best 3 UB scores
    ub_score <- country_data %>%
      filter(FullName %in% teams[i,]) %>%
      mutate(UB = as.numeric(UB)) %>%
      arrange(desc(UB)) %>%
      slice(1:3) %>%
      summarise(total = sum(UB)) %>%
      pull()
   
    # sum of best 3 FX scores
    fx_score <- country_data %>%
      filter(FullName %in% teams[i,]) %>%
      mutate(FX = as.numeric(FX)) %>%
      arrange(desc(FX)) %>%
      slice(1:3) %>%
      summarise(total = sum(FX)) %>%
      pull()
   
    # sum of best 3 VT scores
    vt_score <- country_data %>%
      filter(FullName %in% teams[i,]) %>%
      mutate(VT = as.numeric(VT)) %>%
      arrange(desc(VT)) %>%
      slice(1:3) %>%
      summarise(total = sum(VT)) %>%
      pull()
   
    best_scores <- c(best_scores, sum(bb_score, ub_score, vt_score, fx_score, na.rm = T))
  }
 
 
  return(best_scores)
}
```

```{r}
# main function: return a list of data frames with the best score for each possible teams for each country. Each element in the list is a new iteration
get_team_scores <- function(iter, bb_samples, ub_samples, fx_samples, vt_samples){
  all_team_scores <- c()
  print("function started")
 
  # 0. get simulation names
  sims <- c()
  for (i in 1:iter){
    sims <- c(sims, sprintf("SimulationResults_%s", i))
  }
 
  # 1. filter by eligible athletes
  df_bb_eligible <- bb_samples %>%
    filter(type == "full team")
 
  df_ub_eligible <- ub_samples %>%
    filter(type == "full team")
 
  df_fx_eligible <- fx_samples %>%
    filter(type == "full team")
 
  df_vt_eligible <- vt_samples %>%
    filter(type == "full team")
 
  # 2. Remake data frames so they are easier to work with
  df_bb_eligible <- df_bb_eligible %>%
    unnest_wider(SimulationResults, names_sep = "_") %>%
    pivot_longer(cols = sims, names_to = "iteration")
 
  df_ub_eligible <- df_ub_eligible %>%
    unnest_wider(SimulationResults, names_sep = "_") %>%
    pivot_longer(cols = sims, names_to = "iteration")
 
  df_fx_eligible <- df_fx_eligible %>%
    unnest_wider(SimulationResults, names_sep = "_") %>%
    pivot_longer(cols = sims, names_to = "iteration")
 
  df_vt_eligible <- df_vt_eligible %>%
    unnest_wider(SimulationResults, names_sep = "_") %>%
    pivot_longer(cols = sims, names_to = "iteration")
 
  # 2a. add all of the data frames together
  all_eligible <- rbind(df_bb_eligible, df_ub_eligible, df_fx_eligible, df_vt_eligible)
 
  # 3. Find top candidates for each team by country (top 3 for each apparatus)
  print("finding candidates")
  top_candidates <- candidates(iter, all_eligible, df_bb_eligible, df_ub_eligible,
                               df_fx_eligible, df_vt_eligible)
 
  # 4. Get team scores for each country, for each iteration
  for (i in 1:iter){
    # 4a. get iteration
    olympics <- top_candidates[[sprintf("sim%s", i)]]
    olympics_data <- data.frame()
    countries = c("USA", "GBR", "CAN", "BRA", "ITA", "NED", "FRA", "JPN",
                      "AUS", "ROU", "KOR")
   
    for (country in countries){
      df_country <- olympics %>%
        filter(Country == country) %>%
        pivot_wider(names_from = Apparatus, values_from = value)
     
      # checking for countries that have less than 5 people
     
      n_athletes <- df_country %>%
        distinct(FullName) %>%
        summarise(n = n()) %>%
        pull()
     
      if (n_athletes < 5){
        next
      }
     
      # 4b. get all possible teams
      possible_teams <-  data.frame(t(combn(df_country$FullName, 5)))
      possible_teams$Country <- country
      
      if (n_athletes < 5){
        
        if(n_athletes == 4){
          possible_teams <- possible_teams %>%
            mutate(memember5 = NaN)
        }
        
        else {
          possible_teams <- possible_teams %>%
            mutate(memember4 = NaN, memember5 = NaN)
        }
      }
      
     
      # 4c. get scores for each team
      scores <- team_scores(possible_teams, df_country)
      possible_teams$score <- scores
     
      # 4d. add data for this country to the main data frame
     
      olympics_data <- rbind(olympics_data, data.frame(possible_teams))
    }
   
    # 4e. get results
    results <- olympics_data %>%
      arrange(desc(score)) %>%
      distinct(Country, .keep_all = T) %>%
      mutate(rank = case_when(row_number() %in% c(1:3) ~ row_number(),
                              .default = 0),
             weight = case_when(rank == 1 ~ 3,
                                rank == 3 ~ 1,
                                .default = rank))
   
    # 4f. add simulation result to list
    all_team_scores[[sprintf("sim%s", i)]] <- results
    print(sprintf("added simulation #%s", i))
   
  }
 
 
  return(all_team_scores)
 
}
```

```{r}
get_sim_results <- function(iter, scores, country){
  # 1. make final df
  sim_results = c()
 
  # 2. get data for each simulation
  for (i in 1:iter){
    sim <- scores[[sprintf("sim%s", i)]]
   
    country_df <- sim %>%
      filter(Country == country)
   
    data =  c(Simulation = sprintf("sim%s", i),
                        Member1 = country_df[,c('X1')],
                        Member2 = country_df[,c('X2')],
                        Member3 = country_df[,c('X3')],
                        Member4 = country_df[,c('X4')],
                        Member5 = country_df[,c('X5')],
                        Score = country_df$score,
                        Rank = country_df$rank,
                        Weight = country_df$weight)

    sim_results = rbind(sim_results, data)
  }
 
  return(as.data.frame(sim_results))
}
```


## Example

```{r}
all_team_scores <- get_team_scores(1000, bb_sim, fx_sim, ub_sim, vt_sim)
```

```{r}
all_team_scores$sim1
```



```{r}
get_sim_results(1000, all_team_scores, "USA")
```

```{r}
all_team_scores
```