---
title: "women_team_all_around_simulation_algo"
subtitle: "no subtitle"
author: "women_team_all_around_simulation_algo"
format: 
  html:
    self-contained: true
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
## Setup - run this first to get the libraries
```{r setup, include=FALSE}
library(tidyverse)
library(data.table)
library(ggplot2)
library(purrr)
library(dplyr)
library(KernSmooth)

## LOG INTO https://hypatia.stat.duke.edu USING NET ID AND PW AND THEN CLONE OUR REPO THERE AND THEN RUN THESE SIMULATION .QMD FILES

flexiblas::flexiblas_load_backend("OPENBLAS-THREADS") |>
  flexiblas::flexiblas_switch()
  flexiblas::flexiblas_set_num_threads(8)
```


## THE SET-UP BEFORE THE ALGO -- make sure to replace read.csv with the correct file path -- RUN THIS CODE CHUNK BEFORE RUNNING ANY OF THE HELPER FUNCTION INITIATING CODE CHUNKS BELOW
```{r}
## Re-arranged data
data_women_scores_2022_to_2023 <- read.csv("cleaned data/active_restricted_women_2023.csv") %>%  
  select(Country, FullName, Apparatus, Score, type) %>% 
  # first, making c(VT, VT1, VT2) all just VT, since they're all the same apparatus, just named different at different competitions
  mutate(Apparatus = ifelse(Apparatus %in% c("VT1", "VT2"), "VT", Apparatus))  %>%
  filter(!is.na(Score) & Score != 0) 


# this is the data that will feed into the algo
data_ready_for_algo <- data_women_scores_2022_to_2023 %>%
  group_by(Country, FullName, Apparatus, type) %>%
  summarise(Scores = list(Score), .groups = 'drop')
```


```{r}
## Global Fixed Integers
minBBScoreIn_data_women_scores_2022_to_2023 <- min(data_women_scores_2022_to_2023$Score[data_women_scores_2022_to_2023$Apparatus == "BB"], na.rm = TRUE)
maxBBScoreIn_data_women_scores_2022_to_2023 <- max(data_women_scores_2022_to_2023$Score[data_women_scores_2022_to_2023$Apparatus == "BB"], na.rm = TRUE)

minFXScoreIn_data_women_scores_2022_to_2023 <- min(data_women_scores_2022_to_2023$Score[data_women_scores_2022_to_2023$Apparatus == "FX"], na.rm = TRUE)
maxFXScoreIn_data_women_scores_2022_to_2023 <- max(data_women_scores_2022_to_2023$Score[data_women_scores_2022_to_2023$Apparatus == "FX"], na.rm = TRUE)

minUBScoreIn_data_women_scores_2022_to_2023 <- min(data_women_scores_2022_to_2023$Score[data_women_scores_2022_to_2023$Apparatus == "UB"], na.rm = TRUE)
maxUBScoreIn_data_women_scores_2022_to_2023 <- max(data_women_scores_2022_to_2023$Score[data_women_scores_2022_to_2023$Apparatus == "UB"], na.rm = TRUE)

minVTScoreIn_data_women_scores_2022_to_2023 <- min(data_women_scores_2022_to_2023$Score[data_women_scores_2022_to_2023$Apparatus == "VT"], na.rm = TRUE)
maxVTScoreIn_data_women_scores_2022_to_2023 <- max(data_women_scores_2022_to_2023$Score[data_women_scores_2022_to_2023$Apparatus == "VT"], na.rm = TRUE)
```

```{r}
## 2D Table of Global Fixed Integers
minAndMaxScores2DTable <- list(
    BB = list(
        min = minBBScoreIn_data_women_scores_2022_to_2023,
        max = maxBBScoreIn_data_women_scores_2022_to_2023
    ),
    FX = list(
        min = minFXScoreIn_data_women_scores_2022_to_2023,
        max = maxFXScoreIn_data_women_scores_2022_to_2023
    ),
    UB = list(
        min = minUBScoreIn_data_women_scores_2022_to_2023,
        max = maxUBScoreIn_data_women_scores_2022_to_2023
    ),
    VT = list(
        min = minVTScoreIn_data_women_scores_2022_to_2023,
        max = maxVTScoreIn_data_women_scores_2022_to_2023
    )
)

```

```{r}
## TO BE FED INTO runOlympicsNTimes (including everyone)
allWomenBBParticipants <- data_ready_for_algo %>%
  select(Country, FullName, Apparatus, type) %>%
  unique() %>% 
  filter(Apparatus == "BB")

allWomenUBParticipants <- data_ready_for_algo %>%
  select(Country, FullName, Apparatus, type) %>%
  unique() %>% 
  filter(Apparatus == "UB")

allWomenFXParticipants <- data_ready_for_algo %>%
  select(Country, FullName, Apparatus, type) %>%
  unique() %>% 
  filter(Apparatus == "FX")

allWomenVTParticipants <- data_ready_for_algo %>%
  select(Country, FullName, Apparatus, type) %>%
  unique() %>% 
  filter(Apparatus == "VT")

allWomenBBParticipants <- allWomenBBParticipants %>%
  mutate(SimulationResults = lapply(seq_along(FullName), function(x) list()))

allWomenUBParticipants <- allWomenUBParticipants %>%
  mutate(SimulationResults = lapply(seq_along(FullName), function(x) list()))

allWomenFXParticipants <- allWomenFXParticipants %>%
  mutate(SimulationResults = lapply(seq_along(FullName), function(x) list()))

allWomenVTParticipants <- allWomenVTParticipants %>%
  mutate(SimulationResults = lapply(seq_along(FullName), function(x) list()))
```


```{r}
## SD of BB Scores of all atheletes in the data (that will be the "nugget" when the there are three or fewer scores in an athlete x apparatus combination; the nugget will be used in estimateKernelDensity)
allBBScoresInTheData <- data_women_scores_2022_to_2023[data_women_scores_2022_to_2023$Apparatus == "BB", "Score"]
nuggetBB <- sd(allBBScoresInTheData)


## SD of UB Scores of all atheletes in the data (that will be the "nugget" when the there are three or fewer scores in an athlete x apparatus combination; the nugget will be used in estimateKernelDensity)
allUBScoresInTheData <- data_women_scores_2022_to_2023[data_women_scores_2022_to_2023$Apparatus == "UB", "Score"]
nuggetUB <- sd(allUBScoresInTheData)


## SD of FX Scores of all atheletes in the data (that will be the "nugget" when the there are three or fewer scores in an athlete x apparatus combination; the nugget will be used in estimateKernelDensity)
allFXScoresInTheData <- data_women_scores_2022_to_2023[data_women_scores_2022_to_2023$Apparatus == "FX", "Score"]
nuggetFX <- sd(allFXScoresInTheData)


## SD of VT Scores of all atheletes in the data (that will be the "nugget" when the there are three or fewer scores in an athlete x apparatus combination; the nugget will be used in estimateKernelDensity)
allVTScoresInTheData <- data_women_scores_2022_to_2023[data_women_scores_2022_to_2023$Apparatus == "VT", "Score"]
nuggetVT <- sd(allVTScoresInTheData)
```


## HELPER FUNCTION: createProperDataframe
```{r}
# Helper Function: createProperDataframe
# inputs are: "country code", "Athlete Name", "Apparatus (the two letters, like FX")
# output is a dataframe that is suitable for going in as input into the next step, aka creating estimated kernel densities

createProperDataframe = function(countryCode, athleteName, apparatusInitials){
  dataframeToReturn <- data_ready_for_algo %>% 
    filter(Country == countryCode, FullName == athleteName, Apparatus == apparatusInitials) %>% 
    select(Scores) %>% 
    unnest(Scores) %>% 
    unlist()
  
  apparatus <- apparatusInitials
  
  return(list(dataframeToReturn, apparatus))
}
```



## HELPER FUNCTION: estimateKernelDensity
```{r}
# Helper Function: estimateKernelDensity

# coming up with an estimate kernel density based on the inputs that are:
# 1. output of createProperDataframe = list(properDataframeCreatedForAthleteAndApparatusCombination, apparatus)
# 2. bandwidthValue (the bigger, the "smoother")

# output:
# dataframe of x and y coordinates --> coordinates of the estimated density function

estimateKernelDensity <- function(outputOfCreateProperDataframe, bandwidthValue){
  
  apparatusOfInterestHere = outputOfCreateProperDataframe[[2]]
  
  howManyScoresWeHaveForThatAthleteXApparatusCombination = length(outputOfCreateProperDataframe[[1]])
  
  #setting up appropriate "nugget"
  if (apparatusOfInterestHere == "BB"){
    if (howManyScoresWeHaveForThatAthleteXApparatusCombination < 4){
      nugget = nuggetBB*4
    }
    else{
      nugget = nuggetBB*2
    }
  }
  else if (apparatusOfInterestHere == "UB"){
    if (howManyScoresWeHaveForThatAthleteXApparatusCombination < 4){
      nugget = nuggetUB*4
    }
    else{
      nugget = nuggetUB*2
    }
  }
  else if (apparatusOfInterestHere == "FX"){
    if (howManyScoresWeHaveForThatAthleteXApparatusCombination < 4){
      nugget = nuggetFX*4
    }
    else{
      nugget = nuggetFX*2
    }
  }
  else{
    if (howManyScoresWeHaveForThatAthleteXApparatusCombination < 4){
      nugget = nuggetVT*4
    }
    else{
      nugget = nuggetVT*2
    }
  }
  

  
  kernelLowerLimit = max(minAndMaxScores2DTable$apparatusOfInterestHere$min - nugget, 0)
  kernelUpperLimit = min(minAndMaxScores2DTable$apparatusOfInterestHere$max + nugget, 15.7)
  
  
  almostToReturn <- bkde(x = outputOfCreateProperDataframe[[1]], kernel = "normal", canonical = FALSE, bandwidth = bandwidthValue, gridsize = 401L, range.x = c(kernelLowerLimit, kernelUpperLimit), truncate = TRUE)
  #range.x = c(kernelLowerLimit, kernelUpperLimit)
  dataframeToReturn <- data.frame(
    x = almostToReturn$x, 
    y = almostToReturn$y
  )
  
  return(dataframeToReturn)
}

```




## HELPER FUNCTION: createCDFfromKDEandDrawONEscore
```{r}
createCDFfromKDEandDrawONEscore <- function(dataframeReturnedByestimateKernelDensity){
  # Create a CDF from the KDE
  kde_y_cumsum <- cumsum(dataframeReturnedByestimateKernelDensity$y)
  cdf <- kde_y_cumsum / max(kde_y_cumsum)
  
  
  u <- runif(1)  # Generate uniform random number
  sampled_value <- dataframeReturnedByestimateKernelDensity$x[which.min(abs(cdf - u))]
  
  return(sampled_value)
  
  
}
```



## OVERALL ALGO: runOlympicsNTimes
```{r}
# OVERALL ALGO: runOlympicsNTimes
# input: n
# uses all sorts of helper functions


runOlympicsNTimes <- function(n, allWomenBBParticipants, allWomenFXParticipants, allWomenUBParticipants, allWomenVTParticipants){

  # 1. running the Women's BB n times
  BBParticipants_copied <- allWomenBBParticipants
  
  BBParticipants_copied$SimulationResults <- lapply(1:nrow(BBParticipants_copied), function(x) vector("list", n))
  for (nthOlympic in 1:n){
    
    # each nthOlympic-iteration of the Olympics, this is filling out the nthOlympic-index of each athlete's SimulationResults vector
    for (i in 1:nrow(BBParticipants_copied)) {
      row <- BBParticipants_copied[i, ]
      toAdd <- createCDFfromKDEandDrawONEscore(estimateKernelDensity(createProperDataframe(countryCode = row$Country, athleteName = row$FullName, apparatusInitials = row$Apparatus), 0.25))
    
      BBParticipants_copied[i, ]$SimulationResults[[1]][[nthOlympic]] <- toAdd
    }
    print(paste(nthOlympic, "th olympic done for Women's BB"))
    
  }
  
  #return(BBParticipants_copied)
  
  
    
  
  
  # 2. running the Women's FX n times
  FXParticipants_copied <- allWomenFXParticipants
  
  FXParticipants_copied$SimulationResults <- lapply(1:nrow(FXParticipants_copied), function(x) vector("list", n))
  for (nthOlympic in 1:n){
    
    # each nthOlympic-iteration of the Olympics, this is filling out the nthOlympic-index of each athlete's SimulationResults vector
    for (i in 1:nrow(FXParticipants_copied)) {
      row <- FXParticipants_copied[i, ]
      toAdd <- createCDFfromKDEandDrawONEscore(estimateKernelDensity(createProperDataframe(countryCode = row$Country, athleteName = row$FullName, apparatusInitials = row$Apparatus), 0.25))
    
      FXParticipants_copied[i, ]$SimulationResults[[1]][[nthOlympic]] <- toAdd
    }
    print(paste(nthOlympic, "th olympic done for Women's FX"))
    
  }
  
  #return(FXParticipants_copied)
  
  
  
  
  # 3. running the Women's UB n times
  UBParticipants_copied <- allWomenUBParticipants
  
  UBParticipants_copied$SimulationResults <- lapply(1:nrow(UBParticipants_copied), function(x) vector("list", n))
  for (nthOlympic in 1:n){
    
    # each nthOlympic-iteration of the Olympics, this is filling out the nthOlympic-index of each athlete's SimulationResults vector
    for (i in 1:nrow(UBParticipants_copied)) {
      row <- UBParticipants_copied[i, ]
      toAdd <- createCDFfromKDEandDrawONEscore(estimateKernelDensity(createProperDataframe(countryCode = row$Country, athleteName = row$FullName, apparatusInitials = row$Apparatus), 0.25))
    
      UBParticipants_copied[i, ]$SimulationResults[[1]][[nthOlympic]] <- toAdd
    }
    print(paste(nthOlympic, "th olympic done for Women's UB"))
    
  }
  
  #return(UBParticipants_copied)
  
  
  
  
  
  
  
  # 4. running the Women's VT n times
  VTParticipants_copied <- allWomenVTParticipants
  
  VTParticipants_copied$SimulationResults <- lapply(1:nrow(VTParticipants_copied), function(x) vector("list", n))
  for (nthOlympic in 1:n){
    
    # each nthOlympic-iteration of the Olympics, this is filling out the nthOlympic-index of each athlete's SimulationResults vector
    for (i in 1:nrow(VTParticipants_copied)) {
      row <- VTParticipants_copied[i, ]
      toAdd <- createCDFfromKDEandDrawONEscore(estimateKernelDensity(createProperDataframe(countryCode = row$Country, athleteName = row$FullName, apparatusInitials = row$Apparatus), 0.25))
    
      VTParticipants_copied[i, ]$SimulationResults[[1]][[nthOlympic]] <- toAdd
    }
    print(paste(nthOlympic, "th olympic done for Women's VT"))
    
  }
  
  #return(VTParticipants_copied)
  
  
  
  
  # RETURN A LIST CONTAINING FOUR DATAFRAMES
  return(list(BBResults = BBParticipants_copied, FXResults = FXParticipants_copied, UBResults = UBParticipants_copied, VTResults = VTParticipants_copied))
  
  
}


```




## Getting Simulations
```{r}
# sanityCheck: runOlympicsNTimes
set.seed(1)
test_samples = runOlympicsNTimes(2, allWomenBBParticipants, allWomenFXParticipants, allWomenUBParticipants, allWomenVTParticipants)
```

## Team All-Around Function

*Function*

[rules](https://www.nbcolympics.com/news/gymnastics-101-competition-format#:~:text=The%20highest%20cumulative%20team%20score,%2C%20silver%2C%20and%20bronze%20medals.&text=The%2024%20gymnasts%20with%20the,the%20individual%20all%2Daround%20final.)

```{r}
# helper: function for finding top 5 athletes in each apparatus by Country
candidates <- function(iter, main_df, bb, ub, fx, vt){
  olympics = list()
  all = rbind(bb, ub, fx, vt)
  
  for (i in 1:iter){
    # balance beam
    bb_candids_names <- bb %>%
      filter(iteration == sprintf("SimulationResults_%s", i)) %>%
      group_by(Country) %>%
      arrange(desc(value)) %>%
      slice(1:5) %>%
      ungroup() %>%
      pull(FullName)
    
    # we want to get all of the data for our candidates #
    bb_candids_data <- main_df %>%
      filter(iteration == sprintf("SimulationResults_%s", i) & FullName %in% bb_candids_names)
    
    olympics[[sprintf('sim%s', i)]] = bb_candids_data
    
    # uneven bars
    ub_candids_names <- ub %>%
      filter(iteration == sprintf("SimulationResults_%s", i)) %>%
      group_by(Country) %>%
      arrange(desc(value)) %>%
      slice(1:5) %>%
      ungroup() %>%
      pull(FullName)
    
    ub_candids_data <- main_df %>%
      filter(iteration == sprintf("SimulationResults_%s", i) & FullName %in% ub_candids_names)
    
    # remove duplicate observations as we go #
    olympics[[sprintf('sim%s', i)]] = rbind(olympics[[sprintf('sim%s', i)]], ub_candids_data) %>% distinct(.keep_all = TRUE)
    
    # floor
    fx_candids_names <- fx %>%
      filter(iteration == sprintf("SimulationResults_%s", i)) %>%
      group_by(Country) %>%
      arrange(desc(value)) %>%
      slice(1:5) %>%
      ungroup() %>%
      pull(FullName)
    
     fx_candids_data <- main_df %>%
      filter(iteration == sprintf("SimulationResults_%s", i) & FullName %in% fx_candids_names)
     
    olympics[[sprintf('sim%s', i)]] = rbind(olympics[[sprintf('sim%s', i)]], fx_candids_data) %>% distinct(.keep_all = TRUE)
    
    # vault
    vt_candids_names <- vt %>%
      filter(iteration == sprintf("SimulationResults_%s", i)) %>%
      group_by(Country) %>%
      arrange(desc(value)) %>%
      slice(1:5) %>%
      ungroup() %>%
      pull(FullName)
    
    vt_candids_data <- main_df %>%
      filter(iteration == sprintf("SimulationResults_%s", i) & FullName %in% vt_candids_names)
    
    olympics[[sprintf('sim%s', i)]] = rbind(olympics[[sprintf('sim%s', i)]], vt_candids_data) %>% distinct(.keep_all = TRUE)
    
  }
  
  return(olympics)
}
```

```{r}
# helper: function to get best scores for each team for each country
team_scores <- function(teams, country_data){
  # collect best score for each team
  best_scores <- c()
  
  for (i in 1:nrow(teams)){
    
    # sum of best 3 BB scores
    bb_score <- country_data %>%
      filter(FullName %in% teams[i,]) %>%
      arrange(desc(BB)) %>%
      slice(1:3) %>%
      summarise(total = sum(BB)) %>%
      pull()
    
    # sum of best 3 UB scores
    ub_score <- country_data %>%
      filter(FullName %in% teams[i,]) %>%
      arrange(desc(UB)) %>%
      slice(1:3) %>%
      summarise(total = sum(UB)) %>%
      pull()
    
    # sum of best 3 FX scores
    fx_score <- country_data %>%
      filter(FullName %in% teams[i,]) %>%
      arrange(desc(FX)) %>%
      slice(1:3) %>%
      summarise(total = sum(FX)) %>%
      pull()
    
    # sum of best 3 VT scores
    vt_score <- country_data %>%
      filter(FullName %in% teams[i,]) %>%
      arrange(desc(VT)) %>%
      slice(1:3) %>%
      summarise(total = sum(VT)) %>%
      pull()
    
    best_scores <- c(best_scores, sum(bb_score, ub_score, vt_score, fx_score, na.rm = T))
  }
  
  return(best_scores)
}
```

```{r}
# main function: return a list of data frames with the best score for each possible teams for each country. Each element in the list is a new iteration 
get_team_scores <- function(iter, samples){
  all_team_scores <- c()
  
  # 0. get simulation names
  sims <- c()
  for (i in 1:iter){
    sims <- c(sims, sprintf("SimulationResults_%s", i))
  }
  
  # 1. filter by eligible athletes 
  df_bb_eligible <- samples$BBResults %>%
    filter(type == "full team")
  
  df_ub_eligible <- samples$UBResults %>%
    filter(type == "full team")
  
  df_fx_eligible <- samples$FXResults %>%
    filter(type == "full team")
  
  df_vt_eligible <- samples$VTResults %>%
    filter(type == "full team")
  
  # 2. Remake data frames so they are easier to work with 
  df_bb_eligible <- df_bb_eligible %>%
    unnest_wider(SimulationResults, names_sep = "_") %>%
    pivot_longer(cols = sims, names_to = "iteration")
  
  df_ub_eligible <- df_ub_eligible %>%
    unnest_wider(SimulationResults, names_sep = "_") %>%
    pivot_longer(cols = sims, names_to = "iteration")
  
  df_fx_eligible <- df_fx_eligible %>%
    unnest_wider(SimulationResults, names_sep = "_") %>%
    pivot_longer(cols = sims, names_to = "iteration")
  
  df_vt_eligible <- df_vt_eligible %>%
    unnest_wider(SimulationResults, names_sep = "_") %>%
    pivot_longer(cols = sims, names_to = "iteration")
  
  # 2a. add all of the data frames together
  all_eligible <- rbind(df_bb_eligible, df_ub_eligible, df_fx_eligible, df_vt_eligible)
  
  # 3. Find top candidates for each team by country (top 3 for each apparatus)
  top_candidates <- candidates(iter, all_eligible, df_bb_eligible, df_ub_eligible, 
                               df_fx_eligible, df_vt_eligible)
  
  # 4. Get team scores for each country, for each iteration
  for (i in 1:iter){
    # 4a. get iteration
    olympics <- top_candidates[[sprintf("sim%s", i)]]
    olympics_data <- data.frame()
    countries = c("USA", "GBR", "CAN", "BRA", "ITA", "NED", "FRA", "JPN",
                      "AUS", "ROU", "KOR")
    
    for (country in countries){
      df_country <- olympics %>%
        filter(Country == country) %>%
        pivot_wider(names_from = Apparatus, values_from = value)
      
      # 4b. get all possible teams
      possible_teams <-  data.frame(t(combn(df_country$FullName, 5)))
      possible_teams$Country <- country
      
      # 4c. get scores for each team
      scores <- team_scores(possible_teams, df_country)
      possible_teams$score <- scores
      
      # 4d. add data for this country to the main data frame
      olympics_data <- rbind(olympics_data, data.frame(possible_teams))
    }
    
    # 4e. get results
    results <- olympics_data %>%
      arrange(desc(score)) %>%
      distinct(Country, .keep_all = T) %>%
      mutate(rank = case_when(row_number() %in% c(1:3) ~ row_number(),
                              .default = 0),
             weight = case_when(rank == 1 ~ 3,
                                rank == 3 ~ 1,
                                .default = rank))
    
    # 4f. add simulation result to list
    all_team_scores[[sprintf("sim%s", i)]] <- results
    
  }
  
  
  return(all_team_scores)
  
}
```

```{r}
get_sim_results <- function(iter, scores, country){
  # 1. make final df
  sim_results = c()
  
  # 2. get data for each simulation
  for (i in 1:iter){
    sim <- scores[[sprintf("sim%s", i)]]
    
    country_df <- sim %>%
      filter(Country == country)
    
    data =  c(Simulation = sprintf("sim%s", i), 
                        Member1 = country_df[,c('X1')], 
                        Member2 = country_df[,c('X2')], 
                        Member3 = country_df[,c('X3')], 
                        Member4 = country_df[,c('X4')], 
                        Member5 = country_df[,c('X5')], 
                        Score = country_df$score,
                        Rank = country_df$rank,
                        Weight = country_df$weight)

    sim_results = rbind(sim_results, data)
  }
  
  return(as.data.frame(sim_results))
}
```


## Example

```{r}
all_team_scores <- get_team_scores(2, test_samples)
```


```{r}
get_sim_results(2, all_team_scores, "USA")
```

```{r}
all_team_scores
```




