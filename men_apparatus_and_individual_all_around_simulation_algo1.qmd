---
title: "men_apparatus_and_individual_all_around_simulation_algo"
subtitle: "no subtitle"
author: "men_apparatus_and_individual_all_around_simulation_algo"
format: 
  html:
    self-contained: true
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
## Setup - run this first to get the libraries
```{r setup, include=FALSE}
library(tidyverse)
library(data.table)
library(ggplot2)
library(purrr)
library(dplyr)
library(KernSmooth)

## LOG INTO https://hypatia.stat.duke.edu USING NET ID AND PW AND THEN CLONE OUR REPO THERE AND THEN RUN THESE SIMULATION .QMD FILES

flexiblas::flexiblas_load_backend("OPENBLAS-THREADS") |>
  flexiblas::flexiblas_switch()
  flexiblas::flexiblas_set_num_threads(8)
```



## THE SET-UP BEFORE THE ALGO -- make sure to replace read.csv with the correct file path -- RUN THIS CODE CHUNK BEFORE RUNNING ANY OF THE HELPER FUNCTION INITIATING CODE CHUNKS BELOW
```{r}
## Re-arranged data
data_men_scores_2022_to_2023 <- read.csv("cleaned data/active_restricted_men_2023.csv") %>%  
  select(Country, FullName, Apparatus, Score) %>% 
  # first, making c(VT, VT1, VT2) all just VT, since they're all the same apparatus, just named different at different competitions
  mutate(Apparatus = ifelse(Apparatus %in% c("VT1", "VT2"), "VT", Apparatus))  %>%
  filter(!is.na(Score) & Score != 0) #dropping all NAs -- ask the team: should we also drop zeros? -> emily said yeah 11.13.2023 7 21pm


# this is the data that will feed into the algo
data_ready_for_algo <- data_men_scores_2022_to_2023 %>%
  group_by(Country, FullName, Apparatus) %>%
  summarise(Scores = list(Score), .groups = 'drop')




## Global Fixed Integers
minHBScoreIn_data_men_scores_2022_to_2023 <- min(data_men_scores_2022_to_2023$Score[data_men_scores_2022_to_2023$Apparatus == "HB"], na.rm = TRUE)
maxHBScoreIn_data_men_scores_2022_to_2023 <- max(data_men_scores_2022_to_2023$Score[data_men_scores_2022_to_2023$Apparatus == "HB"], na.rm = TRUE)

minFXScoreIn_data_men_scores_2022_to_2023 <- min(data_men_scores_2022_to_2023$Score[data_men_scores_2022_to_2023$Apparatus == "FX"], na.rm = TRUE)
maxFXScoreIn_data_men_scores_2022_to_2023 <- max(data_men_scores_2022_to_2023$Score[data_men_scores_2022_to_2023$Apparatus == "FX"], na.rm = TRUE)

minPBScoreIn_data_men_scores_2022_to_2023 <- min(data_men_scores_2022_to_2023$Score[data_men_scores_2022_to_2023$Apparatus == "PB"], na.rm = TRUE)
maxPBScoreIn_data_men_scores_2022_to_2023 <- max(data_men_scores_2022_to_2023$Score[data_men_scores_2022_to_2023$Apparatus == "PB"], na.rm = TRUE)

minPHScoreIn_data_men_scores_2022_to_2023 <- min(data_men_scores_2022_to_2023$Score[data_men_scores_2022_to_2023$Apparatus == "PH"], na.rm = TRUE)
maxPHScoreIn_data_men_scores_2022_to_2023 <- max(data_men_scores_2022_to_2023$Score[data_men_scores_2022_to_2023$Apparatus == "PH"], na.rm = TRUE)

minSRScoreIn_data_men_scores_2022_to_2023 <- min(data_men_scores_2022_to_2023$Score[data_men_scores_2022_to_2023$Apparatus == "SR"], na.rm = TRUE)
maxSRScoreIn_data_men_scores_2022_to_2023 <- max(data_men_scores_2022_to_2023$Score[data_men_scores_2022_to_2023$Apparatus == "SR"], na.rm = TRUE)

minVTScoreIn_data_men_scores_2022_to_2023 <- min(data_men_scores_2022_to_2023$Score[data_men_scores_2022_to_2023$Apparatus == "VT"], na.rm = TRUE)
maxVTScoreIn_data_men_scores_2022_to_2023 <- max(data_men_scores_2022_to_2023$Score[data_men_scores_2022_to_2023$Apparatus == "VT"], na.rm = TRUE)

## 2D Table of Global Fixed Integers
minAndMaxScores2DTable <- list(
    HB = list(
        min = minHBScoreIn_data_men_scores_2022_to_2023,
        max = maxHBScoreIn_data_men_scores_2022_to_2023
    ),
    FX = list(
        min = minFXScoreIn_data_men_scores_2022_to_2023,
        max = maxFXScoreIn_data_men_scores_2022_to_2023
    ),
    PB = list(
        min = minPBScoreIn_data_men_scores_2022_to_2023,
        max = maxPBScoreIn_data_men_scores_2022_to_2023
    ),
    PH = list(
        min = minPHScoreIn_data_men_scores_2022_to_2023,
        max = maxPHScoreIn_data_men_scores_2022_to_2023
    ),
    SR = list(
        min = minSRScoreIn_data_men_scores_2022_to_2023,
        max = maxSRScoreIn_data_men_scores_2022_to_2023
    ),
    VT = list(
        min = minVTScoreIn_data_men_scores_2022_to_2023,
        max = maxVTScoreIn_data_men_scores_2022_to_2023
    )
)


## TO BE FED INTO runOlympicsNTimes
allMenHBParticipants <- data_ready_for_algo %>%
  select(Country, FullName, Apparatus) %>%
  unique() %>% 
  filter(Apparatus == "HB")

allMenFXParticipants <- data_ready_for_algo %>%
  select(Country, FullName, Apparatus) %>%
  unique() %>% 
  filter(Apparatus == "FX")

allMenPBParticipants <- data_ready_for_algo %>%
  select(Country, FullName, Apparatus) %>%
  unique() %>% 
  filter(Apparatus == "PB")

allMenPHParticipants <- data_ready_for_algo %>%
  select(Country, FullName, Apparatus) %>%
  unique() %>% 
  filter(Apparatus == "PH")


allMenSRParticipants <- data_ready_for_algo %>%
  select(Country, FullName, Apparatus) %>%
  unique() %>% 
  filter(Apparatus == "SR")

allMenVTParticipants <- data_ready_for_algo %>%
  select(Country, FullName, Apparatus) %>%
  unique() %>% 
  filter(Apparatus == "VT")

allMenHBParticipants <- allMenHBParticipants %>%
  mutate(SimulationResults = lapply(seq_along(FullName), function(x) list()))

allMenFXParticipants <- allMenFXParticipants %>%
  mutate(SimulationResults = lapply(seq_along(FullName), function(x) list()))

allMenPBParticipants <- allMenPBParticipants %>%
  mutate(SimulationResults = lapply(seq_along(FullName), function(x) list()))

allMenPHParticipants <- allMenPHParticipants %>%
  mutate(SimulationResults = lapply(seq_along(FullName), function(x) list()))

allMenSRParticipants <- allMenSRParticipants %>%
  mutate(SimulationResults = lapply(seq_along(FullName), function(x) list()))

allMenVTParticipants <- allMenVTParticipants %>%
  mutate(SimulationResults = lapply(seq_along(FullName), function(x) list()))



## SD of HB Scores of all atheletes in the data (that will be the "nugget" when the there are three or fewer scores in an athlete x apparatus combination; the nugget will be used in estimateKernelDensity)
allHBScoresInTheData <- data_men_scores_2022_to_2023[data_men_scores_2022_to_2023$Apparatus == "HB", "Score"]
nuggetHB <- sd(allHBScoresInTheData)


## SD of FX Scores of all atheletes in the data (that will be the "nugget" when the there are three or fewer scores in an athlete x apparatus combination; the nugget will be used in estimateKernelDensity)
allFXScoresInTheData <- data_men_scores_2022_to_2023[data_men_scores_2022_to_2023$Apparatus == "FX", "Score"]
nuggetFX <- sd(allFXScoresInTheData)


## SD of PB Scores of all atheletes in the data (that will be the "nugget" when the there are three or fewer scores in an athlete x apparatus combination; the nugget will be used in estimateKernelDensity)
allPBScoresInTheData <- data_men_scores_2022_to_2023[data_men_scores_2022_to_2023$Apparatus == "PB", "Score"]
nuggetPB <- sd(allPBScoresInTheData)


## SD of PH Scores of all atheletes in the data (that will be the "nugget" when the there are three or fewer scores in an athlete x apparatus combination; the nugget will be used in estimateKernelDensity)
allPHScoresInTheData <- data_men_scores_2022_to_2023[data_men_scores_2022_to_2023$Apparatus == "PH", "Score"]
nuggetPH <- sd(allPHScoresInTheData)

## SD of SR Scores of all atheletes in the data (that will be the "nugget" when the there are three or fewer scores in an athlete x apparatus combination; the nugget will be used in estimateKernelDensity)
allSRScoresInTheData <- data_men_scores_2022_to_2023[data_men_scores_2022_to_2023$Apparatus == "SR", "Score"]
nuggetSR <- sd(allSRScoresInTheData)


## SD of VT Scores of all atheletes in the data (that will be the "nugget" when the there are three or fewer scores in an athlete x apparatus combination; the nugget will be used in estimateKernelDensity)
allVTScoresInTheData <- data_men_scores_2022_to_2023[data_men_scores_2022_to_2023$Apparatus == "VT", "Score"]
nuggetVT <- sd(allVTScoresInTheData)
```


## HELPER FUNCTION: createProperDataframe
```{r}
# Helper Function: createProperDataframe
# inputs are: "country code", "Athlete Name", "Apparatus (the two letters, like FX")
# output is a dataframe that is suitable for going in as input into the next step, aka creating estimated kernel densities

createProperDataframe = function(countryCode, athleteName, apparatusInitials){
  dataframeToReturn <- data_ready_for_algo %>% 
    filter(Country == countryCode, FullName == athleteName, Apparatus == apparatusInitials) %>% 
    select(Scores) %>% 
    unnest(Scores) %>% 
    unlist()
  
  apparatus <- apparatusInitials
  
  return(list(dataframeToReturn, apparatus))
}
```



## HELPER FUNCTION: estimateKernelDensity
```{r}
# Helper Function: estimateKernelDensity

# coming up with an estimate kernel density based on the inputs that are:
# 1. output of createProperDataframe = list(properDataframeCreatedForAthleteAndApparatusCombination, apparatus)
# 2. bandwidthValue (the bigger, the "smoother")

# output:
# dataframe of x and y coordinates --> coordinates of the estimated density function

estimateKernelDensity <- function(outputOfCreateProperDataframe, bandwidthValue){
  
  apparatusOfInterestHere = outputOfCreateProperDataframe[[2]]
  
  howManyScoresWeHaveForThatAthleteXApparatusCombination = length(outputOfCreateProperDataframe[[1]])
  
  #setting up appropriate "nugget"
  if (apparatusOfInterestHere == "HB"){
    if (howManyScoresWeHaveForThatAthleteXApparatusCombination < 4){
      nugget = nuggetHB*4
    }
    else{
      nugget = nuggetHB*2
    }
  }
  else if (apparatusOfInterestHere == "FX"){
    if (howManyScoresWeHaveForThatAthleteXApparatusCombination < 4){
      nugget = nuggetFX*4
    }
    else{
      nugget = nuggetFX*2
    }
  }
  else if (apparatusOfInterestHere == "PB"){
    if (howManyScoresWeHaveForThatAthleteXApparatusCombination < 4){
      nugget = nuggetPB*4
    }
    else{
      nugget = nuggetPB*2
    }
  }
  else if (apparatusOfInterestHere == "PH"){
    if (howManyScoresWeHaveForThatAthleteXApparatusCombination < 4){
      nugget = nuggetPH*4
    }
    else{
      nugget = nuggetPH*2
    }
  }    
  else if (apparatusOfInterestHere == "SR"){
    if (howManyScoresWeHaveForThatAthleteXApparatusCombination < 4){
      nugget = nuggetSR*4
    }
    else{
      nugget = nuggetSR*2
    }
  }
  else {
    if (howManyScoresWeHaveForThatAthleteXApparatusCombination < 4){
      nugget = nuggetVT*4
    }
    else{
      nugget = nuggetVT*2
    }
  }

  
  kernelLowerLimit = max(minAndMaxScores2DTable$apparatusOfInterestHere$min - nugget, 0)
  kernelUpperLimit = min(minAndMaxScores2DTable$apparatusOfInterestHere$max + nugget, 15.7)
  
  
  almostToReturn <- bkde(x = outputOfCreateProperDataframe[[1]], kernel = "normal", canonical = FALSE, bandwidth = bandwidthValue, gridsize = 401L, range.x = c(kernelLowerLimit, kernelUpperLimit), truncate = TRUE)
  #range.x = c(kernelLowerLimit, kernelUpperLimit)
  dataframeToReturn <- data.frame(
    x = almostToReturn$x, 
    y = almostToReturn$y
  )
  
  return(dataframeToReturn)
}

```




## HELPER FUNCTION: createCDFfromKDEandDrawONEscore
```{r}
createCDFfromKDEandDrawONEscore <- function(dataframeReturnedByestimateKernelDensity){
  # Create a CDF from the KDE
  kde_y_cumsum <- cumsum(dataframeReturnedByestimateKernelDensity$y)
  cdf <- kde_y_cumsum / max(kde_y_cumsum)
  
  
  u <- runif(1)  # Generate uniform random number
  sampled_value <- dataframeReturnedByestimateKernelDensity$x[which.min(abs(cdf - u))]
  
  return(sampled_value)
  
  
}
```



## OVERALL ALGO: runOlympicsNTimes
```{r}
# OVERALL ALGO: runOlympicsNTimes
# input: n
# uses all sorts of helper functions


runOlympicsNTimes <- function(n, allMenHBParticipants, allMenFXParticipants, allMenPBParticipants, allMenPHParticipants, allMenSRParticipants, allMenVTParticipants){

  # 1. running the Men's HB n times
  HBParticipants_copied <- allMenHBParticipants
  
  HBParticipants_copied$SimulationResults <- lapply(1:nrow(HBParticipants_copied), function(x) vector("list", n))
  for (nthOlympic in 1:n){
    
    # each nthOlympic-iteration of the Olympics, this is filling out the nthOlympic-index of each athlete's SimulationResults vector
    for (i in 1:nrow(HBParticipants_copied)) {
      row <- HBParticipants_copied[i, ]
      toAdd <- createCDFfromKDEandDrawONEscore(estimateKernelDensity(createProperDataframe(countryCode = row$Country, athleteName = row$FullName, apparatusInitials = row$Apparatus), 0.25))
    
      HBParticipants_copied[i, ]$SimulationResults[[1]][[nthOlympic]] <- toAdd
    }
    print(paste(nthOlympic, "th olympic done for Men's HB"))
    
  }
  
  
  
  # 2. running the Men's FX n times
  FXParticipants_copied <- allMenFXParticipants
  
  FXParticipants_copied$SimulationResults <- lapply(1:nrow(FXParticipants_copied), function(x) vector("list", n))
  for (nthOlympic in 1:n){
    
    # each nthOlympic-iteration of the Olympics, this is filling out the nthOlympic-index of each athlete's SimulationResults vector
    for (i in 1:nrow(FXParticipants_copied)) {
      row <- FXParticipants_copied[i, ]
      toAdd <- createCDFfromKDEandDrawONEscore(estimateKernelDensity(createProperDataframe(countryCode = row$Country, athleteName = row$FullName, apparatusInitials = row$Apparatus), 0.25))
    
      FXParticipants_copied[i, ]$SimulationResults[[1]][[nthOlympic]] <- toAdd
    }
    print(paste(nthOlympic, "th olympic done for Men's FX"))
    
  }
  
  #return(FXParticipants_copied)
  
  
  
  
  # 3. running the Men's PB n times
  PBParticipants_copied <- allMenPBParticipants
  
  PBParticipants_copied$SimulationResults <- lapply(1:nrow(PBParticipants_copied), function(x) vector("list", n))
  for (nthOlympic in 1:n){
    
    # each nthOlympic-iteration of the Olympics, this is filling out the nthOlympic-index of each athlete's SimulationResults vector
    for (i in 1:nrow(PBParticipants_copied)) {
      row <- PBParticipants_copied[i, ]
      toAdd <- createCDFfromKDEandDrawONEscore(estimateKernelDensity(createProperDataframe(countryCode = row$Country, athleteName = row$FullName, apparatusInitials = row$Apparatus), 0.25))
    
      PBParticipants_copied[i, ]$SimulationResults[[1]][[nthOlympic]] <- toAdd
    }
    print(paste(nthOlympic, "th olympic done for Men's PB"))
    
  }
  
  #return(PBParticipants_copied)
  
  
  
    # 4. running the Men's PH n times
  PHParticipants_copied <- allMenPHParticipants
  
  PHParticipants_copied$SimulationResults <- lapply(1:nrow(PHParticipants_copied), function(x) vector("list", n))
  for (nthOlympic in 1:n){
    
    # each nthOlympic-iteration of the Olympics, this is filling out the nthOlympic-index of each athlete's SimulationResults vector
    for (i in 1:nrow(PHParticipants_copied)) {
      row <- PHParticipants_copied[i, ]
      toAdd <- createCDFfromKDEandDrawONEscore(estimateKernelDensity(createProperDataframe(countryCode = row$Country, athleteName = row$FullName, apparatusInitials = row$Apparatus), 0.25))
    
      PHParticipants_copied[i, ]$SimulationResults[[1]][[nthOlympic]] <- toAdd
    }
    print(paste(nthOlympic, "th olympic done for Men's PH"))
    
  }
  
    
    # 5. running the Men's SR n times
  SRParticipants_copied <- allMenSRParticipants
  
  SRParticipants_copied$SimulationResults <- lapply(1:nrow(SRParticipants_copied), function(x) vector("list", n))
  for (nthOlympic in 1:n){
    
    # each nthOlympic-iteration of the Olympics, this is filling out the nthOlympic-index of each athlete's SimulationResults vector
    for (i in 1:nrow(SRParticipants_copied)) {
      row <- SRParticipants_copied[i, ]
      toAdd <- createCDFfromKDEandDrawONEscore(estimateKernelDensity(createProperDataframe(countryCode = row$Country, athleteName = row$FullName, apparatusInitials = row$Apparatus), 0.25))
    
      SRParticipants_copied[i, ]$SimulationResults[[1]][[nthOlympic]] <- toAdd
    }
    print(paste(nthOlympic, "th olympic done for Men's SR"))
    
  }
  
  

  # 4. running the Men's VT n times
  VTParticipants_copied <- allMenVTParticipants
  
  VTParticipants_copied$SimulationResults <- lapply(1:nrow(VTParticipants_copied), function(x) vector("list", n))
  for (nthOlympic in 1:n){
    
    # each nthOlympic-iteration of the Olympics, this is filling out the nthOlympic-index of each athlete's SimulationResults vector
    for (i in 1:nrow(VTParticipants_copied)) {
      row <- VTParticipants_copied[i, ]
      toAdd <- createCDFfromKDEandDrawONEscore(estimateKernelDensity(createProperDataframe(countryCode = row$Country, athleteName = row$FullName, apparatusInitials = row$Apparatus), 0.25))
    
      VTParticipants_copied[i, ]$SimulationResults[[1]][[nthOlympic]] <- toAdd
    }
    print(paste(nthOlympic, "th olympic done for Men's VT"))
    
  }
  
  #return(VTParticipants_copied)
  
  
  
  
  # RETURN A LIST CONTAINING FOUR DATAFRAMES
  return(list(HBResults = HBParticipants_copied, FXResults = FXParticipants_copied, PBResults = PBParticipants_copied, PHResults = PHParticipants_copied, SRResults = SRParticipants_copied, VTResults = VTParticipants_copied))
  
  
}


```




## EXAMPLE WAY OF UTILIZING runOlympicsNTimes (all commented out below)
```{r}
# sanityCheck: runOlympicsNTimes
set.seed(120)
m = runOlympicsNTimes(1000, allMenHBParticipants, allMenFXParticipants, allMenPBParticipants, allMenPHParticipants, allMenSRParticipants, allMenVTParticipants)

```


```{r}
mHB <- m$HBResults

mHB <- mHB %>%
  mutate(mean = sapply(SimulationResults, function(x) mean(unlist(x))))


mFX <- m$FXResults

mFX <- mFX %>%
  mutate(mean = sapply(SimulationResults, function(x) mean(unlist(x))))


mPB <- m$PBResults

mPB <- mPB %>%
  mutate(mean = sapply(SimulationResults, function(x) mean(unlist(x))))

mPH <- m$PHResults

mPH <- mPH %>%
  mutate(mean = sapply(SimulationResults, function(x) mean(unlist(x))))


mSR <- m$SRResults

mSR <- mSR %>%
  mutate(mean = sapply(SimulationResults, function(x) mean(unlist(x))))


mVT <- m$VTResults

mVT <- mVT %>%
  mutate(mean = sapply(SimulationResults, function(x) mean(unlist(x))))

```


```{r}

# Read the CSV file into a dataframe
df <- read.csv("EZ Simulation Exports/Men_HBResults_1000_EZ.csv", stringsAsFactors = FALSE)

# Convert the SimulationResults string to a list of numeric values
df$SimulationResults <- lapply(strsplit(df$SimulationResults, ",\\s*"), as.numeric)

mHB <- df

mHB <- mHB %>%
  mutate(mean = sapply(SimulationResults, function(x) mean(unlist(x))))

# Read the CSV file into a dataframe
df <- read.csv("EZ Simulation Exports/Men_FXResults_1000_EZ.csv", stringsAsFactors = FALSE)

# Convert the SimulationResults string to a list of numeric values
df$SimulationResults <- lapply(strsplit(df$SimulationResults, ",\\s*"), as.numeric)

mFX <- df

mFX <- mFX %>%
  mutate(mean = sapply(SimulationResults, function(x) mean(unlist(x))))

# Read the CSV file into a dataframe
df <- read.csv("EZ Simulation Exports/Men_PBResults_1000_EZ.csv", stringsAsFactors = FALSE)

# Convert the SimulationResults string to a list of numeric values
df$SimulationResults <- lapply(strsplit(df$SimulationResults, ",\\s*"), as.numeric)

mPB <- df

mPB <- mPB %>%
  mutate(mean = sapply(SimulationResults, function(x) mean(unlist(x))))


# Read the CSV file into a dataframe
df <- read.csv("EZ Simulation Exports/Men_PHResults_1000_EZ.csv", stringsAsFactors = FALSE)

# Convert the SimulationResults string to a list of numeric values
df$SimulationResults <- lapply(strsplit(df$SimulationResults, ",\\s*"), as.numeric)

mPH <- df

mPH <- mPH %>%
  mutate(mean = sapply(SimulationResults, function(x) mean(unlist(x))))

# Read the CSV file into a dataframe
df <- read.csv("EZ Simulation Exports/Men_SRResults_1000_EZ.csv", stringsAsFactors = FALSE)

# Convert the SimulationResults string to a list of numeric values
df$SimulationResults <- lapply(strsplit(df$SimulationResults, ",\\s*"), as.numeric)

mSR <- df

mSR <- mSR %>%
  mutate(mean = sapply(SimulationResults, function(x) mean(unlist(x))))


# Read the CSV file into a dataframe
df <- read.csv("EZ Simulation Exports/Men_VTResults_1000_EZ.csv", stringsAsFactors = FALSE)

# Convert the SimulationResults string to a list of numeric values
df$SimulationResults <- lapply(strsplit(df$SimulationResults, ",\\s*"), as.numeric)

mVT <- df

mVT <- mVT %>%
  mutate(mean = sapply(SimulationResults, function(x) mean(unlist(x))))

mAllAround

```

## Creating a new dataframe of AllAround results 

```{r}
# Get the unique list of FullNames from all dataframes
all_names <- unique(c(mHB$FullName, mFX$FullName, mPB$FullName, mVT$FullName, mPH$FullName, mSR$FullName))

# Function to add missing entries
add_missing_entries <- function(df, names, apparatus) {
  # Names that are missing in the dataframe
  missing_names <- setdiff(names, df$FullName)
  
  # Create missing entries with the specified values
  missing_entries <- data.frame(
    Country = rep('USA', length(missing_names)),
    FullName = missing_names,
    Apparatus = rep(apparatus, length(missing_names)),
    SimulationResults = I(replicate(length(missing_names), list(rep(0, 1000)))),
    mean = rep(0, length(missing_names))

  )
  
  # Combine the original dataframe with the missing entries
  rbind(df, missing_entries)
}



# Add missing entries to each dataframe
mVT <- add_missing_entries(mVT, all_names, 'VT')
mFX <- add_missing_entries(mFX, all_names, 'FX')
mHB <- add_missing_entries(mHB, all_names, 'HB')
mPB <- add_missing_entries(mPB, all_names, 'PB')
mPH <- add_missing_entries(mPH, all_names, 'PH')
mSR <- add_missing_entries(mSR, all_names, 'SR')

```

```{r}
# Using left_join to ensure all names are included from each dataframe.
merged_df <- mVT %>%
  left_join(mHB, by = "FullName") %>%
  left_join(mFX, by = "FullName") %>%
  left_join(mPB, by = "FullName") %>%
  left_join(mPH, by = "FullName") %>%
  left_join(mSR, by = "FullName") 

# Rename the SimulationResults columns to avoid name clashes
names(merged_df)[names(merged_df) == 'SimulationResults.x'] <- 'SimulationResultsVT'
names(merged_df)[names(merged_df) == 'SimulationResults.y'] <- 'SimulationResultsHB'
names(merged_df)[names(merged_df) == 'SimulationResults.x.x'] <- 'SimulationResultsFX'
names(merged_df)[names(merged_df) == 'SimulationResults.y.y'] <- 'SimulationResultsPB'
names(merged_df)[names(merged_df) == 'SimulationResults.x.x.x'] <- 'SimulationResultsPH'
names(merged_df)[names(merged_df) == 'SimulationResults.y.y.y'] <- 'SimulationResultsSR'

# Function to sum the elements of the simulation results
sum_simulation_results <- function(vt, hb, fx, pb, ph, sr) {
  mapply(sum, vt, hb, fx, pb, ph, sr) # Sum corresponding elements
}

# Apply the function to each row using row-wise and then mutate to create the new column
merged_df <- merged_df %>%
  rowwise() %>%
  mutate(SimulationResults = list(sum_simulation_results(SimulationResultsVT, SimulationResultsHB, SimulationResultsFX, SimulationResultsPB, SimulationResultsPH, SimulationResultsSR)))


# Create the final dataframe with required columns
mAllAround <- merged_df %>%
  select(Country = Country.x, FullName, Apparatus = Apparatus.x, mean = mean.x, SimulationResults)

# Set Apparatus to 'All-Around'
mAllAround$Apparatus <- 'All-Around'

mAllAround$mean <- sapply(mAllAround$SimulationResults, mean)


```


## converting into character strings for export 
```{r}
HBResults <- mHB
 # Convert all list columns in BBResults to character strings
HBResults[] <- lapply(HBResults, function(x) {
  if (is.list(x)) {
    sapply(x, toString)
  } else {
    x
  }
})

# Now save the modified data frame to a CSV file
write.csv(HBResults, file = "Men_HBResults_1000_EZ.csv", row.names = FALSE)


FXResults <- mFX
 # Convert all list columns in BBResults to character strings
FXResults[] <- lapply(FXResults, function(x) {
  if (is.list(x)) {
    sapply(x, toString)
  } else {
    x
  }
})

# Now save the modified data frame to a CSV file
write.csv(FXResults, file = "Men_FXResults_1000_EZ.csv", row.names = FALSE)


PBResults <- mPB
 # Convert all list columns in BBResults to character strings
PBResults[] <- lapply(PBResults, function(x) {
  if (is.list(x)) {
    sapply(x, toString)
  } else {
    x
  }
})

# Now save the modified data frame to a CSV file
write.csv(PBResults, file = "Men_PBResults_1000_EZ.csv", row.names = FALSE)


PHResults <- mPH
 # Convert all list columns in BBResults to character strings
PHResults[] <- lapply(PHResults, function(x) {
  if (is.list(x)) {
    sapply(x, toString)
  } else {
    x
  }
})

# Now save the modified data frame to a CSV file
write.csv(PHResults, file = "Men_PHResults_1000_EZ.csv", row.names = FALSE)


SRResults <- mSR
 # Convert all list columns in BBResults to character strings
SRResults[] <- lapply(SRResults, function(x) {
  if (is.list(x)) {
    sapply(x, toString)
  } else {
    x
  }
})

# Now save the modified data frame to a CSV file
write.csv(SRResults, file = "Men_SRResults_1000_EZ.csv", row.names = FALSE)


VTResults <- mVT
VTResults[] <- lapply(VTResults, function(x) {
  if (is.list(x)) {
    sapply(x, toString)
  } else {
    x
  }
})

# Now save the modified data frame to a CSV file
write.csv(VTResults, file = "Men_VTResults_1000_EZ.csv", row.names = FALSE)

```


## Expected Medal 

```{r}

## helper function to transform scores into relevant medals
transform_values <- function(column) {
  ranks <- min_rank(-column)  # Rank in descending order, ties are handled so that people with the same score are given the same medal 
  result <- ifelse(ranks == 1, 3, ifelse(ranks == 2, 2, ifelse(ranks == 3, 1, 0)))
  return(result)
}

separate_columns <- function(data, list_column_name, num_columns) {
  # Create empty data frame to store the separated columns
  result_matrix <- matrix(NA, nrow = nrow(data), ncol = num_columns)
  colnames(result_matrix) <- paste(list_column_name, seq_len(num_columns), sep = "_")
  
  # Loop through each row and separate the nested list into columns
  for (i in seq_len(nrow(data))) {
    nested_list <- data[[list_column_name]][i]
    
    # checking if list is empty (numeric(0))
    if (is.na(data[["mean"]][i])){
      result_matrix[i, ] <- 0
    }
    
    else {
      # Assign the values to the corresponding columns in the result matrix
      result_matrix[i, ] <- unlist(nested_list)
    }
    
  }
  
  # Bind the result matrix with the original data frame, excluding the original list column
  result_data <- cbind(data[, -which(names(data) == list_column_name)], result_matrix)
  result_data <- mutate_at(result_data, vars(starts_with(list_column_name)), transform_values)
  
  result_data$avg_result <- rowMeans(select(result_data, starts_with(list_column_name)))

  
  return(result_data)
}
```




```{r}

## calculating the top three potential people in each individual event 


mHB_separated_data <- separate_columns(mHB, "SimulationResults",1000)

mHB_Top_Three <- mHB_separated_data %>%
  filter(Country == "USA") %>%
  arrange(desc(avg_result)) %>%
  select(Country, FullName, mean, avg_result, Apparatus) %>%
  slice(1:10)


mFX_separated_data <- separate_columns(mFX, "SimulationResults", 1000)

mFX_Top_Three <- mFX_separated_data %>%
  filter(Country == "USA") %>%
  arrange(desc(avg_result)) %>%
  select(Country, FullName, mean, avg_result, Apparatus) %>%
  slice(1:10)



mPB_separated_data <- separate_columns(mPB, "SimulationResults", 1000)

mPB_Top_Three <- mPB_separated_data %>% 
  filter(Country == "USA") %>% 
  arrange(desc(avg_result)) %>% 
  select(Country, FullName, mean, avg_result, Apparatus) %>% 
  slice(1:10)



mPH_separated_data <- separate_columns(mPH, "SimulationResults", 1000)

mPH_Top_Three <- mPH_separated_data %>% 
  filter(Country == "USA") %>% 
  arrange(desc(avg_result)) %>% 
  select(Country, FullName, mean, avg_result, Apparatus) %>% 
  slice(1:10)



mSR_separated_data <- separate_columns(mSR, "SimulationResults", 1000)

mSR_Top_Three <- mSR_separated_data %>% 
  filter(Country == "USA") %>% 
  arrange(desc(avg_result)) %>% 
  select(Country, FullName, mean, avg_result, Apparatus) %>% 
  slice(1:10)



mVT_separated_data <- separate_columns(mVT, "SimulationResults", 1000)

mVT_Top_Three <- mVT_separated_data %>% 
  filter(Country == "USA") %>% 
  arrange(desc(avg_result)) %>% 
  select(Country, FullName, mean, avg_result, Apparatus) %>% 
  slice(1:10)



mAllAround_separated_data <- separate_columns(mAllAround, "SimulationResults", 1000)

mAllAround_Top_Three <- mAllAround_separated_data %>% 
  filter(Country == "USA") %>% 
  arrange(desc(avg_result)) %>% 
  select(Country, FullName, mean, avg_result, Apparatus) %>%
  slice(1:10)


```

```{r}
# Create a vector of all unique FullNames across the dataframes
all_fullnames <- unique(c(mHB_Top_Three$FullName, mFX_Top_Three$FullName, mPB_Top_Three$FullName, mPH_Top_Three$FullName, mSR_Top_Three$FullName, mVT_Top_Three$FullName, mAllAround_Top_Three$FullName))

all_fullnames
```

```{r}
# Create a vector of all unique FullNames across the dataframes
all_fullnames <- unique(c(mHB_Top_Three$FullName, mFX_Top_Three$FullName, mPB_Top_Three$FullName, mPH_Top_Three$FullName, mSR_Top_Three$FullName, mVT_Top_Three$FullName, mAllAround_Top_Three$FullName))
# Initialize an empty dataframe to store the combinations and results
m_result_df <- data.frame()

# Iterate through all combinations of 5 FullName values
for (i in 1:length(all_fullnames)) {
  for (j in (i+1):length(all_fullnames)) {
    for (k in (j+1):length(all_fullnames)) {
      for (l in (k+1):length(all_fullnames)) {
        for (m in (l+1):length(all_fullnames)) {
          # Extract the FullName values for the combination
          combo <- c(all_fullnames[i], all_fullnames[j], all_fullnames[k], all_fullnames[l], all_fullnames[m])
          
          hb_result <- sum(head(subset(mHB_Top_Three, FullName %in% combo)[order(-subset(mHB_Top_Three, FullName %in% combo)$avg_result), ]$avg_result, 2))
          fx_result <- sum(head(subset(mFX_Top_Three, FullName %in% combo)[order(-subset(mFX_Top_Three, FullName %in% combo)$avg_result), ]$avg_result, 2))
          pb_result <- sum(head(subset(mPB_Top_Three, FullName %in% combo)[order(-subset(mPB_Top_Three, FullName %in% combo)$avg_result), ]$avg_result, 2))
          ph_result <- sum(head(subset(mPH_Top_Three, FullName %in% combo)[order(-subset(mPH_Top_Three, FullName %in% combo)$avg_result), ]$avg_result, 2))
          sr_result <- sum(head(subset(mSR_Top_Three, FullName %in% combo)[order(-subset(mSR_Top_Three, FullName %in% combo)$avg_result), ]$avg_result, 2))
          vt_result <- sum(head(subset(mVT_Top_Three, FullName %in% combo)[order(-subset(mVT_Top_Three, FullName %in% combo)$avg_result), ]$avg_result, 2))
          allaround_result <- sum(head(subset(mAllAround_Top_Three, FullName %in% combo)[order(-subset(mAllAround_Top_Three, FullName %in% combo)$avg_result), ]$avg_result, 2))

          
          
          # Create a new row with the combination and results
          new_row <- data.frame(Combo = paste(combo, collapse = ", "),
                                HB_Result = hb_result,
                                FX_Result = fx_result,
                                PB_Result = pb_result,
                                PH_Result = ph_result,
                                SR_Result = sr_result,
                                VT_Result = vt_result,
                                AllAround_Result = allaround_result)
          
          # Append the new row to the result dataframe
          m_result_df <- rbind(m_result_df, new_row)
        }
      }
    }
  }
}




```

```{r}
# Display the resulting dataframe with all combinations and results
m_result_df$Total_Result <- rowSums(m_result_df[, c("HB_Result", "FX_Result", "PB_Result", "PH_Result", "SR_Result","VT_Result", "AllAround_Result")])
```

## ignore this, hasn't been adapted completely yet 

## Getting the aggregate scores

```{r}

# List of all data frames
data_frames <- list(mHB, mFX, mPB, mPH, mSR, mVT)

# Function to select the relevant columns and rename 'mean' to a unique name
prepare_df <- function(df, name) {
  df <- df[, c('Country', 'FullName', 'mean')]
  colnames(df)[3] <- name
  return(df)
}

# Prepare each data frame
mHB_prepared <- prepare_df(mHB, 'meanHB')
mFX_prepared <- prepare_df(mFX, 'meanFX')
mPB_prepared <- prepare_df(mPB, 'meanPB')
mPH_prepared <- prepare_df(mPH, 'meanPH')
mSR_prepared <- prepare_df(mSR, 'meanSR')
mVT_prepared <- prepare_df(mVT, 'meanVT')

# Merge all data frames by 'Country' and 'FullName'
all_around <- Reduce(function(x, y) merge(x, y, by = c('Country', 'FullName'), all = TRUE), 
                     list(mHB_prepared, mFX_prepared, mPB_prepared, mPH_prepared, mSR_prepared, mVT_prepared))

# Calculate the AllAroundScore by row-wise summing of the mean columns
all_around$AllAroundScore <- rowSums(all_around[,c('meanHB', 'meanFX', 'meanPB', 'meanPH', 'meanSR', 'meanVT')], na.rm = TRUE)

# Select only the Country, FullName, and AllAroundScore columns
all_around <- all_around[, c('Country', 'FullName', 'AllAroundScore')]

# Output the final data frame
all_around




```
## Choosing top two atheletes from each nation
```{r}

# Arrange the data by Country and descending AllAroundScore
all_around <- all_around %>%
  arrange(Country, desc(AllAroundScore))

# Filter out the top two individuals from each country
all_aroud_finalists <- all_around %>% 
  group_by(Country) %>% 
  slice_max(AllAroundScore, n = 2)

# Now, sort the top individuals by AllAroundScore in descending order
all_aroud_finalists <- all_aroud_finalists %>% 
  ungroup() %>% 
  arrange(desc(AllAroundScore))

```


```{r}


write.csv(mHB_Top_Three, file = "simluation_results_young/men_mHB_Weighted_Medals.csv")
write.csv(mFX_Top_Three, file = "simluation_results_young/men_mPB_Weighted_Medals.csv")
write.csv(mPB_Top_Three, file = "simluation_results_young/men_mPH_Weighted_Medals.csv")
write.csv(mPH_Top_Three, file = "simluation_results_young/men_mFX_Weighted_Medals.csv")
write.csv(mSR_Top_Three, file = "simluation_results_young/men_mSR_Weighted_Medals.csv")
write.csv(mVT_Top_Three, file = "simluation_results_young/men_mVT_Weighted_Medals.csv")
write.csv(mAllAround_Top_Three, file = "simluation_results_young/men_All_Aroung_Weighted_Medals.csv")
write.csv(m_result_df, file = "simluation_results_young/men_Total_Weighted_Medals.csv")


```


